LOAD:08048000 ;
LOAD:08048000 ; +-------------------------------------------------------------------------+
LOAD:08048000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
LOAD:08048000 ; |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
LOAD:08048000 ; |                            Freeware version                             |
LOAD:08048000 ; +-------------------------------------------------------------------------+
LOAD:08048000 ;
LOAD:08048000 ; Input SHA256 : B0BC9554D5ACDDD6F6B84AEAA934BBBE6D62B3C4FA6B3F9D39973302C1303545
LOAD:08048000 ; Input MD5    : 03649ACB2C7A0F7DE7797FB45FAC5892
LOAD:08048000 ; Input CRC32  : F4076FA8
LOAD:08048000
LOAD:08048000 ; File Name   : /Users/heynard/Downloads/Ressources/sample
LOAD:08048000 ; Format      : ELF for Intel 386 (Executable)
LOAD:08048000 ; Imagebase   : 8048000
LOAD:08048000 ; Interpreter '/lib/ld-linux.so.2'
LOAD:08048000 ; Needed Library 'libc.so.6'
LOAD:08048000 ;
LOAD:08048000 ; Source File : 'crtstuff.c'
LOAD:08048000 ; Source File : 'sample.c'
LOAD:08048000 ; Source File : 'crtstuff.c'
LOAD:08048000
LOAD:08048000                 .686p
LOAD:08048000                 .mmx
LOAD:08048000                 .model flat
LOAD:08048000 .intel_syntax noprefix
LOAD:08048000
LOAD:08048000 ; ===========================================================================
LOAD:08048000
LOAD:08048000 ; Segment type: Pure code
LOAD:08048000 ; Segment permissions: Read/Execute
LOAD:08048000 LOAD            segment mempage public 'CODE' use32
LOAD:08048000                 assume cs:LOAD
LOAD:08048000                 ;org 8048000h
LOAD:08048000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:08048000 dword_8048000   dd 464C457Fh            ; DATA XREF: LOAD:0804807C↓o
LOAD:08048000                                         ; File format: \x7FELF
LOAD:08048004                 db 1                    ; File class: 32-bit
LOAD:08048005                 db 1                    ; Data encoding: little-endian
LOAD:08048006                 db 1                    ; File version
LOAD:08048007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:08048008                 db 0                    ; ABI Version
LOAD:08048009                 db 7 dup(0)             ; Padding
LOAD:08048010                 dw 2                    ; File type: Executable
LOAD:08048012                 dw 3                    ; Machine: Intel 386
LOAD:08048014                 dd 1                    ; File version
LOAD:08048018                 dd offset _start        ; Entry point
LOAD:0804801C                 dd 34h                  ; PHT file offset
LOAD:08048020                 dd 0DD8h                ; SHT file offset
LOAD:08048024                 dd 0                    ; Processor-specific flags
LOAD:08048028                 dw 34h                  ; ELF header size
LOAD:0804802A                 dw 20h                  ; PHT entry size
LOAD:0804802C                 dw 8                    ; Number of entries in PHT
LOAD:0804802E                 dw 28h                  ; SHT entry size
LOAD:08048030                 dw 1Eh                  ; Number of entries in SHT
LOAD:08048032                 dw 1Bh                  ; SHT entry index for string table
LOAD:08048034 ; ELF32 Program Header
LOAD:08048034 ; PHT Entry 0
LOAD:08048034 dword_8048034   dd 6                    ; DATA XREF: LOAD:0804803C↓o
LOAD:08048034                                         ; Type: PHDR
LOAD:08048038                 dd 34h                  ; File offset
LOAD:0804803C                 dd offset dword_8048034 ; Virtual address
LOAD:08048040                 dd 8048034h             ; Physical address
LOAD:08048044                 dd 100h                 ; Size in file image
LOAD:08048048                 dd 100h                 ; Size in memory image
LOAD:0804804C                 dd 5                    ; Flags
LOAD:08048050                 dd 4                    ; Alignment
LOAD:08048054 ; PHT Entry 1
LOAD:08048054                 dd 3                    ; Type: INTERP
LOAD:08048058                 dd 134h                 ; File offset
LOAD:0804805C                 dd offset aLibLdLinuxSo2 ; Virtual address
LOAD:08048060                 dd 8048134h             ; Physical address
LOAD:08048064                 dd 13h                  ; Size in file image
LOAD:08048068                 dd 13h                  ; Size in memory image
LOAD:0804806C                 dd 4                    ; Flags
LOAD:08048070                 dd 1                    ; Alignment
LOAD:08048074 ; PHT Entry 2
LOAD:08048074                 dd 1                    ; Type: LOAD
LOAD:08048078                 dd 0                    ; File offset
LOAD:0804807C                 dd offset dword_8048000 ; Virtual address
LOAD:08048080                 dd 8048000h             ; Physical address
LOAD:08048084                 dd 564h                 ; Size in file image
LOAD:08048088                 dd 564h                 ; Size in memory image
LOAD:0804808C                 dd 5                    ; Flags
LOAD:08048090                 dd 1000h                ; Alignment
LOAD:08048094 ; PHT Entry 3
LOAD:08048094                 dd 1                    ; Type: LOAD
LOAD:08048098                 dd 564h                 ; File offset
LOAD:0804809C                 dd offset __frame_dummy_init_array_entry ; Virtual address
LOAD:080480A0                 dd 8049564h             ; Physical address
LOAD:080480A4                 dd 114h                 ; Size in file image
LOAD:080480A8                 dd 118h                 ; Size in memory image
LOAD:080480AC                 dd 6                    ; Flags
LOAD:080480B0                 dd 1000h                ; Alignment
LOAD:080480B4 ; PHT Entry 4
LOAD:080480B4                 dd 2                    ; Type: DYNAMIC
LOAD:080480B8                 dd 570h                 ; File offset
LOAD:080480BC                 dd offset _DYNAMIC      ; Virtual address
LOAD:080480C0                 dd 8049570h             ; Physical address
LOAD:080480C4                 dd 0E8h                 ; Size in file image
LOAD:080480C8                 dd 0E8h                 ; Size in memory image
LOAD:080480CC                 dd 6                    ; Flags
LOAD:080480D0                 dd 4                    ; Alignment
LOAD:080480D4 ; PHT Entry 5
LOAD:080480D4                 dd 4                    ; Type: NOTE
LOAD:080480D8                 dd 148h                 ; File offset
LOAD:080480DC                 dd offset dword_8048148 ; Virtual address
LOAD:080480E0                 dd 8048148h             ; Physical address
LOAD:080480E4                 dd 20h                  ; Size in file image
LOAD:080480E8                 dd 20h                  ; Size in memory image
LOAD:080480EC                 dd 4                    ; Flags
LOAD:080480F0                 dd 4                    ; Alignment
LOAD:080480F4 ; PHT Entry 6
LOAD:080480F4                 dd 6474E550h            ; Type: EH_FRAME
LOAD:080480F8                 dd 4A0h                 ; File offset
LOAD:080480FC                 dd offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:08048100                 dd 80484A0h             ; Physical address
LOAD:08048104                 dd 24h                  ; Size in file image
LOAD:08048108                 dd 24h                  ; Size in memory image
LOAD:0804810C                 dd 4                    ; Flags
LOAD:08048110                 dd 4                    ; Alignment
LOAD:08048114 ; PHT Entry 7
LOAD:08048114                 dd 6474E551h            ; Type: STACK
LOAD:08048118                 dd 0                    ; File offset
LOAD:0804811C                 dd 0                    ; Virtual address
LOAD:08048120                 dd 0                    ; Physical address
LOAD:08048124                 dd 0                    ; Size in file image
LOAD:08048128                 dd 0                    ; Size in memory image
LOAD:0804812C                 dd 6                    ; Flags
LOAD:08048130                 dd 10h                  ; Alignment
LOAD:08048134 aLibLdLinuxSo2  db '/lib/ld-linux.so.2',0
LOAD:08048134                                         ; DATA XREF: LOAD:0804805C↑o
LOAD:08048147                 align 4
LOAD:08048148 dword_8048148   dd 4, 10h, 1, 554E47h, 0
LOAD:08048148                                         ; DATA XREF: LOAD:080480DC↑o
LOAD:0804815C                 dd 2, 6, 20h
LOAD:08048168 ; ELF Hash Table
LOAD:08048168 elf_hash_nbucket dd 3
LOAD:0804816C elf_hash_nchain dd 5
LOAD:08048170 elf_hash_bucket dd 2, 4, 3
LOAD:0804817C elf_hash_chain  dd 3 dup(0), 1, 0
LOAD:08048190 ; ELF Symbol Table
LOAD:08048190                 Elf32_Sym <0>
LOAD:080481A0                 Elf32_Sym <offset aPrintf - offset byte_80481E0, 0, 0, 12h, 0, 0> ; "printf"
LOAD:080481B0                 Elf32_Sym <offset aGmonStart - offset byte_80481E0, 0, 0, 20h, 0, 0> ; "__gmon_start__"
LOAD:080481C0                 Elf32_Sym <offset aIoStdinUsed - offset byte_80481E0, \ ; "_IO_stdin_used"
LOAD:080481C0                            offset _IO_stdin_used, 4, 11h, 0, 0Fh>
LOAD:080481D0                 Elf32_Sym <offset aLibcStartMain - offset byte_80481E0, 0, 0, 12h, 0, \ ; "__libc_start_main"
LOAD:080481D0                            0>
LOAD:080481E0 ; ELF String Table
LOAD:080481E0 byte_80481E0    db 0                    ; DATA XREF: LOAD:080481A0↑o
LOAD:080481E0                                         ; LOAD:080481B0↑o ...
LOAD:080481E1 aLibcSo6        db 'libc.so.6',0
LOAD:080481EB aIoStdinUsed    db '_IO_stdin_used',0   ; DATA XREF: LOAD:080481C0↑o
LOAD:080481FA aPrintf         db 'printf',0           ; DATA XREF: LOAD:080481A0↑o
LOAD:08048201 aLibcStartMain  db '__libc_start_main',0
LOAD:08048201                                         ; DATA XREF: LOAD:080481D0↑o
LOAD:08048213 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:080481B0↑o
LOAD:08048222 aGlibc20        db 'GLIBC_2.0',0
LOAD:0804822C                 dd 20000h, 10000h, 2, 10001h, 1, 10h, 0
LOAD:08048248                 dd 0D696910h, 20000h, 42h, 0
LOAD:08048258 ; ELF REL Relocation Table
LOAD:08048258                 Elf32_Rel <8049658h, 206h> ; R_386_GLOB_DAT __gmon_start__
LOAD:08048260 ; ELF JMPREL Relocation Table
LOAD:08048260                 Elf32_Rel <8049668h, 107h> ; R_386_JMP_SLOT printf
LOAD:08048268                 Elf32_Rel <804966Ch, 407h> ; R_386_JMP_SLOT __libc_start_main
LOAD:08048268 LOAD            ends
LOAD:08048268
.init:08048270 ; ===========================================================================
.init:08048270
.init:08048270 ; Segment type: Pure code
.init:08048270 ; Segment permissions: Read/Execute
.init:08048270 _init           segment dword public 'CODE' use32
.init:08048270                 assume cs:_init
.init:08048270                 ;org 8048270h
.init:08048270                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:08048270
.init:08048270 ; =============== S U B R O U T I N E =======================================
.init:08048270
.init:08048270
.init:08048270                 public _init_proc
.init:08048270 _init_proc      proc near               ; CODE XREF: __libc_csu_init+1E↓p
.init:08048270                 push    ebx             ; _init
.init:08048271                 sub     esp, 8
.init:08048274                 call    __x86_get_pc_thunk_bx
.init:08048279                 add     ebx, 13E3h
.init:0804827F                 mov     eax, ds:(__gmon_start___ptr - 804965Ch)[ebx]
.init:08048285                 test    eax, eax
.init:08048287                 jz      short loc_804828E
.init:08048289                 call    __gmon_start__
.init:0804828E
.init:0804828E loc_804828E:                            ; CODE XREF: _init_proc+17↑j
.init:0804828E                 add     esp, 8
.init:08048291                 pop     ebx
.init:08048292                 retn
.init:08048292 _init_proc      endp
.init:08048292
.init:08048292 _init           ends
.init:08048292
LOAD:08048293 ; ===========================================================================
LOAD:08048293
LOAD:08048293 ; Segment type: Pure code
LOAD:08048293 ; Segment permissions: Read/Execute
LOAD:08048293 LOAD            segment mempage public 'CODE' use32
LOAD:08048293                 assume cs:LOAD
LOAD:08048293                 ;org 8048293h
LOAD:08048293                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:08048293                 align 10h
LOAD:08048293 LOAD            ends
LOAD:08048293
.plt:080482A0 ; ===========================================================================
.plt:080482A0
.plt:080482A0 ; Segment type: Pure code
.plt:080482A0 ; Segment permissions: Read/Execute
.plt:080482A0 _plt            segment para public 'CODE' use32
.plt:080482A0                 assume cs:_plt
.plt:080482A0                 ;org 80482A0h
.plt:080482A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:080482A0
.plt:080482A0 ; =============== S U B R O U T I N E =======================================
.plt:080482A0
.plt:080482A0
.plt:080482A0 sub_80482A0     proc near               ; CODE XREF: .plt:080482BB↓j
.plt:080482A0                                         ; .plt:080482CB↓j
.plt:080482A0                 push    ds:dword_8049660
.plt:080482A6                 jmp     ds:dword_8049664
.plt:080482A6 sub_80482A0     endp
.plt:080482A6
.plt:080482A6 ; ---------------------------------------------------------------------------
.plt:080482AC                 align 10h
.plt:080482B0 ; [00000006 BYTES: COLLAPSED FUNCTION _printf. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:080482B6 ; ---------------------------------------------------------------------------
.plt:080482B6                 push    0
.plt:080482BB                 jmp     sub_80482A0
.plt:080482C0 ; [00000006 BYTES: COLLAPSED FUNCTION ___libc_start_main. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:080482C6 ; ---------------------------------------------------------------------------
.plt:080482C6                 push    8
.plt:080482CB                 jmp     sub_80482A0
.plt:080482CB _plt            ends
.plt:080482CB
.plt.got:080482D0 ; ===========================================================================
.plt.got:080482D0
.plt.got:080482D0 ; Segment type: Pure code
.plt.got:080482D0 ; Segment permissions: Read/Execute
.plt.got:080482D0 ; Segment alignment 'qword' can not be represented in assembly
.plt.got:080482D0 _plt_got        segment para public 'CODE' use32
.plt.got:080482D0                 assume cs:_plt_got
.plt.got:080482D0                 ;org 80482D0h
.plt.got:080482D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:080482D0 ; [00000006 BYTES: COLLAPSED FUNCTION __gmon_start__. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt.got:080482D6                 align 4
.plt.got:080482D6 _plt_got        ends
.plt.got:080482D6
LOAD:080482D8 ; ===========================================================================
LOAD:080482D8
LOAD:080482D8 ; Segment type: Pure code
LOAD:080482D8 ; Segment permissions: Read/Execute
LOAD:080482D8 LOAD            segment mempage public 'CODE' use32
LOAD:080482D8                 assume cs:LOAD
LOAD:080482D8                 ;org 80482D8h
LOAD:080482D8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:080482D8                 align 10h
LOAD:080482D8 LOAD            ends
LOAD:080482D8
.text:080482E0 ; ===========================================================================
.text:080482E0
.text:080482E0 ; Segment type: Pure code
.text:080482E0 ; Segment permissions: Read/Execute
.text:080482E0 _text           segment para public 'CODE' use32
.text:080482E0                 assume cs:_text
.text:080482E0                 ;org 80482E0h
.text:080482E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:080482E0
.text:080482E0 ; =============== S U B R O U T I N E =======================================
.text:080482E0
.text:080482E0 ; Attributes: noreturn fuzzy-sp
.text:080482E0
.text:080482E0                 public _start
.text:080482E0 _start          proc near               ; DATA XREF: LOAD:08048018↑o
.text:080482E0                 xor     ebp, ebp
.text:080482E2                 pop     esi
.text:080482E3                 mov     ecx, esp
.text:080482E5                 and     esp, 0FFFFFFF0h
.text:080482E8                 push    eax
.text:080482E9                 push    esp             ; stack_end
.text:080482EA                 push    edx             ; rtld_fini
.text:080482EB                 push    offset __libc_csu_fini ; fini
.text:080482F0                 push    offset __libc_csu_init ; init
.text:080482F5                 push    ecx             ; ubp_av
.text:080482F6                 push    esi             ; argc
.text:080482F7                 push    offset main     ; main
.text:080482FC                 call    ___libc_start_main
.text:08048301                 hlt
.text:08048301 _start          endp
.text:08048301
.text:08048301 ; ---------------------------------------------------------------------------
.text:08048302                 align 10h
.text:08048310
.text:08048310 ; =============== S U B R O U T I N E =======================================
.text:08048310
.text:08048310
.text:08048310                 public __x86_get_pc_thunk_bx
.text:08048310 __x86_get_pc_thunk_bx proc near         ; CODE XREF: _init_proc+4↑p
.text:08048310                                         ; __libc_csu_init+6↓p ...
.text:08048310                 mov     ebx, [esp+0]
.text:08048313                 retn
.text:08048313 __x86_get_pc_thunk_bx endp
.text:08048313
.text:08048313 ; ---------------------------------------------------------------------------
.text:08048314                 align 10h
.text:08048320
.text:08048320 ; =============== S U B R O U T I N E =======================================
.text:08048320
.text:08048320
.text:08048320 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux+F↓p
.text:08048320                 mov     eax, offset unk_804967B
.text:08048325                 sub     eax, offset __bss_start
.text:0804832A                 cmp     eax, 6
.text:0804832D                 jbe     short locret_8048349
.text:0804832F                 mov     eax, 0
.text:08048334                 test    eax, eax
.text:08048336                 jz      short locret_8048349
.text:08048338                 push    ebp
.text:08048339                 mov     ebp, esp
.text:0804833B                 sub     esp, 14h
.text:0804833E                 push    offset __bss_start
.text:08048343                 call    eax
.text:08048345                 add     esp, 10h
.text:08048348                 leave
.text:08048349
.text:08048349 locret_8048349:                         ; CODE XREF: deregister_tm_clones+D↑j
.text:08048349                                         ; deregister_tm_clones+16↑j
.text:08048349                 rep retn
.text:08048349 deregister_tm_clones endp
.text:08048349
.text:08048349 ; ---------------------------------------------------------------------------
.text:0804834B                 align 10h
.text:08048350
.text:08048350 ; =============== S U B R O U T I N E =======================================
.text:08048350
.text:08048350
.text:08048350 register_tm_clones proc near            ; CODE XREF: frame_dummy:loc_80483BB↓j
.text:08048350                                         ; frame_dummy+26↓j
.text:08048350                 mov     eax, offset __bss_start
.text:08048355                 sub     eax, offset __bss_start
.text:0804835A                 sar     eax, 2
.text:0804835D                 mov     edx, eax
.text:0804835F                 shr     edx, 1Fh
.text:08048362                 add     eax, edx
.text:08048364                 sar     eax, 1
.text:08048366                 jz      short locret_8048383
.text:08048368                 mov     edx, 0
.text:0804836D                 test    edx, edx
.text:0804836F                 jz      short locret_8048383
.text:08048371                 push    ebp
.text:08048372                 mov     ebp, esp
.text:08048374                 sub     esp, 10h
.text:08048377                 push    eax
.text:08048378                 push    offset __bss_start
.text:0804837D                 call    edx
.text:0804837F                 add     esp, 10h
.text:08048382                 leave
.text:08048383
.text:08048383 locret_8048383:                         ; CODE XREF: register_tm_clones+16↑j
.text:08048383                                         ; register_tm_clones+1F↑j
.text:08048383                 rep retn
.text:08048383 register_tm_clones endp
.text:08048383
.text:08048383 ; ---------------------------------------------------------------------------
.text:08048385                 align 10h
.text:08048390
.text:08048390 ; =============== S U B R O U T I N E =======================================
.text:08048390
.text:08048390
.text:08048390 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:08048390                 cmp     ds:__bss_start, 0
.text:08048397                 jnz     short locret_80483AC
.text:08048399                 push    ebp
.text:0804839A                 mov     ebp, esp
.text:0804839C                 sub     esp, 8
.text:0804839F                 call    deregister_tm_clones
.text:080483A4                 mov     ds:__bss_start, 1
.text:080483AB                 leave
.text:080483AC
.text:080483AC locret_80483AC:                         ; CODE XREF: __do_global_dtors_aux+7↑j
.text:080483AC                 rep retn
.text:080483AC __do_global_dtors_aux endp
.text:080483AC
.text:080483AC ; ---------------------------------------------------------------------------
.text:080483AE                 align 10h
.text:080483B0
.text:080483B0 ; =============== S U B R O U T I N E =======================================
.text:080483B0
.text:080483B0
.text:080483B0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+44↓p
.text:080483B0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:080483B0                 mov     eax, offset __JCR_LIST__
.text:080483B5                 mov     edx, [eax]
.text:080483B7                 test    edx, edx
.text:080483B9                 jnz     short loc_80483C0
.text:080483BB
.text:080483BB loc_80483BB:                            ; CODE XREF: frame_dummy+17↓j
.text:080483BB                 jmp     short register_tm_clones
.text:080483BB ; ---------------------------------------------------------------------------
.text:080483BD                 align 10h
.text:080483C0
.text:080483C0 loc_80483C0:                            ; CODE XREF: frame_dummy+9↑j
.text:080483C0                 mov     edx, 0
.text:080483C5                 test    edx, edx
.text:080483C7                 jz      short loc_80483BB
.text:080483C9                 push    ebp
.text:080483CA                 mov     ebp, esp
.text:080483CC                 sub     esp, 14h
.text:080483CF                 push    eax
.text:080483D0                 call    edx
.text:080483D2                 add     esp, 10h
.text:080483D5                 leave
.text:080483D6                 jmp     register_tm_clones
.text:080483D6 frame_dummy     endp
.text:080483D6
.text:080483D6 ; ---------------------------------------------------------------------------
.text:080483DB                 align 10h
.text:080483E0
.text:080483E0 ; =============== S U B R O U T I N E =======================================
.text:080483E0
.text:080483E0 ; Attributes: bp-based frame
.text:080483E0
.text:080483E0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:080483E0                 public main
.text:080483E0 main            proc near               ; DATA XREF: _start+17↑o
.text:080483E0
.text:080483E0 var_8           = dword ptr -8
.text:080483E0 var_4           = dword ptr -4
.text:080483E0 argc            = dword ptr  8
.text:080483E0 argv            = dword ptr  0Ch
.text:080483E0 envp            = dword ptr  10h
.text:080483E0
.text:080483E0                 push    ebp
.text:080483E1                 mov     ebp, esp
.text:080483E3                 sub     esp, 18h
.text:080483E6                 lea     eax, aHelloWorld ; "Hello, World!\n"
.text:080483EC                 mov     [ebp+var_4], 0
.text:080483F3                 mov     [esp], eax
.text:080483F6                 call    _printf
.text:080483FB                 xor     ecx, ecx
.text:080483FD                 mov     [ebp+var_8], eax
.text:08048400                 mov     eax, ecx
.text:08048402                 add     esp, 18h
.text:08048405                 pop     ebp
.text:08048406                 retn
.text:08048406 main            endp
.text:08048406
.text:08048406 ; ---------------------------------------------------------------------------
.text:08048407                 align 10h
.text:08048410
.text:08048410 ; =============== S U B R O U T I N E =======================================
.text:08048410
.text:08048410
.text:08048410 ; void _libc_csu_init(void)
.text:08048410                 public __libc_csu_init
.text:08048410 __libc_csu_init proc near               ; DATA XREF: _start+10↑o
.text:08048410
.text:08048410 arg_0           = dword ptr  4
.text:08048410 arg_4           = dword ptr  8
.text:08048410 arg_8           = dword ptr  0Ch
.text:08048410
.text:08048410                 push    ebp
.text:08048411                 push    edi
.text:08048412                 xor     edi, edi
.text:08048414                 push    esi
.text:08048415                 push    ebx
.text:08048416                 call    __x86_get_pc_thunk_bx
.text:0804841B                 add     ebx, 1241h
.text:08048421                 sub     esp, 0Ch
.text:08048424                 mov     ebp, [esp+1Ch+arg_0]
.text:08048428                 lea     esi, (__do_global_dtors_aux_fini_array_entry - 804965Ch)[ebx]
.text:0804842E                 call    _init_proc
.text:08048433                 lea     eax, (__frame_dummy_init_array_entry - 804965Ch)[ebx]
.text:08048439                 sub     esi, eax
.text:0804843B                 sar     esi, 2
.text:0804843E                 test    esi, esi
.text:08048440                 jz      short loc_8048465
.text:08048442                 lea     esi, [esi+0]
.text:08048448
.text:08048448 loc_8048448:                            ; CODE XREF: __libc_csu_init+53↓j
.text:08048448                 sub     esp, 4
.text:0804844B                 push    [esp+20h+arg_8]
.text:0804844F                 push    [esp+24h+arg_4]
.text:08048453                 push    ebp
.text:08048454                 call    ds:(__frame_dummy_init_array_entry - 804965Ch)[ebx+edi*4]
.text:0804845B                 add     edi, 1
.text:0804845E                 add     esp, 10h
.text:08048461                 cmp     edi, esi
.text:08048463                 jnz     short loc_8048448
.text:08048465
.text:08048465 loc_8048465:                            ; CODE XREF: __libc_csu_init+30↑j
.text:08048465                 add     esp, 0Ch
.text:08048468                 pop     ebx
.text:08048469                 pop     esi
.text:0804846A                 pop     edi
.text:0804846B                 pop     ebp
.text:0804846C                 retn
.text:0804846C __libc_csu_init endp
.text:0804846C
.text:0804846C ; ---------------------------------------------------------------------------
.text:0804846D                 align 10h
.text:08048470
.text:08048470 ; =============== S U B R O U T I N E =======================================
.text:08048470
.text:08048470
.text:08048470 ; void _libc_csu_fini(void)
.text:08048470                 public __libc_csu_fini
.text:08048470 __libc_csu_fini proc near               ; DATA XREF: _start+B↑o
.text:08048470                 rep retn
.text:08048470 __libc_csu_fini endp
.text:08048470
.text:08048470 _text           ends
.text:08048470
LOAD:08048472 ; ===========================================================================
LOAD:08048472
LOAD:08048472 ; Segment type: Pure code
LOAD:08048472 ; Segment permissions: Read/Execute
LOAD:08048472 LOAD            segment mempage public 'CODE' use32
LOAD:08048472                 assume cs:LOAD
LOAD:08048472                 ;org 8048472h
LOAD:08048472                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:08048472                 align 4
LOAD:08048472 LOAD            ends
LOAD:08048472
.fini:08048474 ; ===========================================================================
.fini:08048474
.fini:08048474 ; Segment type: Pure code
.fini:08048474 ; Segment permissions: Read/Execute
.fini:08048474 _fini           segment dword public 'CODE' use32
.fini:08048474                 assume cs:_fini
.fini:08048474                 ;org 8048474h
.fini:08048474                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:08048474
.fini:08048474 ; =============== S U B R O U T I N E =======================================
.fini:08048474
.fini:08048474
.fini:08048474                 public _term_proc
.fini:08048474 _term_proc      proc near
.fini:08048474                 push    ebx             ; _fini
.fini:08048475                 sub     esp, 8
.fini:08048478                 call    __x86_get_pc_thunk_bx
.fini:0804847D                 add     ebx, 11DFh
.fini:08048483                 add     esp, 8
.fini:08048486                 pop     ebx
.fini:08048487                 retn
.fini:08048487 _term_proc      endp
.fini:08048487
.fini:08048487 _fini           ends
.fini:08048487
.rodata:08048488 ; ===========================================================================
.rodata:08048488
.rodata:08048488 ; Segment type: Pure data
.rodata:08048488 ; Segment permissions: Read
.rodata:08048488 _rodata         segment dword public 'CONST' use32
.rodata:08048488                 assume cs:_rodata
.rodata:08048488                 ;org 8048488h
.rodata:08048488                 public _fp_hw
.rodata:08048488 _fp_hw          db    3
.rodata:08048489                 db    0
.rodata:0804848A                 db    0
.rodata:0804848B                 db    0
.rodata:0804848C                 public _IO_stdin_used
.rodata:0804848C _IO_stdin_used  db    1                 ; DATA XREF: LOAD:080481C0↑o
.rodata:0804848D                 db    0
.rodata:0804848E                 db    2
.rodata:0804848F                 db    0
.rodata:08048490 aHelloWorld     db 'Hello, World!',0Ah,0
.rodata:08048490                                         ; DATA XREF: main+6↑o
.rodata:08048490 _rodata         ends
.rodata:08048490
LOAD:0804849F ; ===========================================================================
LOAD:0804849F
LOAD:0804849F ; Segment type: Pure code
LOAD:0804849F ; Segment permissions: Read/Execute
LOAD:0804849F LOAD            segment mempage public 'CODE' use32
LOAD:0804849F                 assume cs:LOAD
LOAD:0804849F                 ;org 804849Fh
LOAD:0804849F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0804849F                 align 10h
LOAD:0804849F LOAD            ends
LOAD:0804849F
.eh_frame_hdr:080484A0 ; ===========================================================================
.eh_frame_hdr:080484A0
.eh_frame_hdr:080484A0 ; Segment type: Pure data
.eh_frame_hdr:080484A0 ; Segment permissions: Read
.eh_frame_hdr:080484A0 _eh_frame_hdr   segment dword public 'CONST' use32
.eh_frame_hdr:080484A0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:080484A0                 ;org 80484A0h
.eh_frame_hdr:080484A0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:080480FC↑o
.eh_frame_hdr:080484A1                 db  1Bh
.eh_frame_hdr:080484A2                 db    3
.eh_frame_hdr:080484A3                 db  3Bh ; ;
.eh_frame_hdr:080484A4                 db  20h
.eh_frame_hdr:080484A5                 db    0
.eh_frame_hdr:080484A6                 db    0
.eh_frame_hdr:080484A7                 db    0
.eh_frame_hdr:080484A8                 db    3
.eh_frame_hdr:080484A9                 db    0
.eh_frame_hdr:080484AA                 db    0
.eh_frame_hdr:080484AB                 db    0
.eh_frame_hdr:080484AC                 db    0
.eh_frame_hdr:080484AD                 db 0FEh
.eh_frame_hdr:080484AE                 db 0FFh
.eh_frame_hdr:080484AF                 db 0FFh
.eh_frame_hdr:080484B0                 db  3Ch ; <
.eh_frame_hdr:080484B1                 db    0
.eh_frame_hdr:080484B2                 db    0
.eh_frame_hdr:080484B3                 db    0
.eh_frame_hdr:080484B4                 db  70h ; p
.eh_frame_hdr:080484B5                 db 0FFh
.eh_frame_hdr:080484B6                 db 0FFh
.eh_frame_hdr:080484B7                 db 0FFh
.eh_frame_hdr:080484B8                 db  60h ; `
.eh_frame_hdr:080484B9                 db    0
.eh_frame_hdr:080484BA                 db    0
.eh_frame_hdr:080484BB                 db    0
.eh_frame_hdr:080484BC                 db 0D0h
.eh_frame_hdr:080484BD                 db 0FFh
.eh_frame_hdr:080484BE                 db 0FFh
.eh_frame_hdr:080484BF                 db 0FFh
.eh_frame_hdr:080484C0                 db 0ACh
.eh_frame_hdr:080484C1                 db    0
.eh_frame_hdr:080484C2                 db    0
.eh_frame_hdr:080484C3                 db    0
.eh_frame_hdr:080484C3 _eh_frame_hdr   ends
.eh_frame_hdr:080484C3
.eh_frame:080484C4 ; ===========================================================================
.eh_frame:080484C4
.eh_frame:080484C4 ; Segment type: Pure data
.eh_frame:080484C4 ; Segment permissions: Read
.eh_frame:080484C4 _eh_frame       segment dword public 'CONST' use32
.eh_frame:080484C4                 assume cs:_eh_frame
.eh_frame:080484C4                 ;org 80484C4h
.eh_frame:080484C4                 db  14h
.eh_frame:080484C5                 db    0
.eh_frame:080484C6                 db    0
.eh_frame:080484C7                 db    0
.eh_frame:080484C8                 db    0
.eh_frame:080484C9                 db    0
.eh_frame:080484CA                 db    0
.eh_frame:080484CB                 db    0
.eh_frame:080484CC                 db    1
.eh_frame:080484CD                 db  7Ah ; z
.eh_frame:080484CE                 db  52h ; R
.eh_frame:080484CF                 db    0
.eh_frame:080484D0                 db    1
.eh_frame:080484D1                 db  7Ch ; |
.eh_frame:080484D2                 db    8
.eh_frame:080484D3                 db    1
.eh_frame:080484D4                 db  1Bh
.eh_frame:080484D5                 db  0Ch
.eh_frame:080484D6                 db    4
.eh_frame:080484D7                 db    4
.eh_frame:080484D8                 db  88h
.eh_frame:080484D9                 db    1
.eh_frame:080484DA                 db    0
.eh_frame:080484DB                 db    0
.eh_frame:080484DC                 db  20h
.eh_frame:080484DD                 db    0
.eh_frame:080484DE                 db    0
.eh_frame:080484DF                 db    0
.eh_frame:080484E0                 db  1Ch
.eh_frame:080484E1                 db    0
.eh_frame:080484E2                 db    0
.eh_frame:080484E3                 db    0
.eh_frame:080484E4                 db 0BCh
.eh_frame:080484E5                 db 0FDh
.eh_frame:080484E6                 db 0FFh
.eh_frame:080484E7                 db 0FFh
.eh_frame:080484E8                 db  30h ; 0
.eh_frame:080484E9                 db    0
.eh_frame:080484EA                 db    0
.eh_frame:080484EB                 db    0
.eh_frame:080484EC                 db    0
.eh_frame:080484ED                 db  0Eh
.eh_frame:080484EE                 db    8
.eh_frame:080484EF                 db  46h ; F
.eh_frame:080484F0                 db  0Eh
.eh_frame:080484F1                 db  0Ch
.eh_frame:080484F2                 db  4Ah ; J
.eh_frame:080484F3                 db  0Fh
.eh_frame:080484F4                 db  0Bh
.eh_frame:080484F5                 db  74h ; t
.eh_frame:080484F6                 db    4
.eh_frame:080484F7                 db  78h ; x
.eh_frame:080484F8                 db    0
.eh_frame:080484F9                 db  3Fh ; ?
.eh_frame:080484FA                 db  1Ah
.eh_frame:080484FB                 db  3Bh ; ;
.eh_frame:080484FC                 db  2Ah ; *
.eh_frame:080484FD                 db  32h ; 2
.eh_frame:080484FE                 db  24h ; $
.eh_frame:080484FF                 db  22h ; "
.eh_frame:08048500                 db  48h ; H
.eh_frame:08048501                 db    0
.eh_frame:08048502                 db    0
.eh_frame:08048503                 db    0
.eh_frame:08048504                 db  40h ; @
.eh_frame:08048505                 db    0
.eh_frame:08048506                 db    0
.eh_frame:08048507                 db    0
.eh_frame:08048508                 db    8
.eh_frame:08048509                 db 0FFh
.eh_frame:0804850A                 db 0FFh
.eh_frame:0804850B                 db 0FFh
.eh_frame:0804850C                 db  5Dh ; ]
.eh_frame:0804850D                 db    0
.eh_frame:0804850E                 db    0
.eh_frame:0804850F                 db    0
.eh_frame:08048510                 db    0
.eh_frame:08048511                 db  41h ; A
.eh_frame:08048512                 db  0Eh
.eh_frame:08048513                 db    8
.eh_frame:08048514                 db  85h
.eh_frame:08048515                 db    2
.eh_frame:08048516                 db  41h ; A
.eh_frame:08048517                 db  0Eh
.eh_frame:08048518                 db  0Ch
.eh_frame:08048519                 db  87h
.eh_frame:0804851A                 db    3
.eh_frame:0804851B                 db  43h ; C
.eh_frame:0804851C                 db  0Eh
.eh_frame:0804851D                 db  10h
.eh_frame:0804851E                 db  86h
.eh_frame:0804851F                 db    4
.eh_frame:08048520                 db  41h ; A
.eh_frame:08048521                 db  0Eh
.eh_frame:08048522                 db  14h
.eh_frame:08048523                 db  83h
.eh_frame:08048524                 db    5
.eh_frame:08048525                 db  4Eh ; N
.eh_frame:08048526                 db  0Eh
.eh_frame:08048527                 db  20h
.eh_frame:08048528                 db  67h ; g
.eh_frame:08048529                 db  0Eh
.eh_frame:0804852A                 db  24h ; $
.eh_frame:0804852B                 db  44h ; D
.eh_frame:0804852C                 db  0Eh
.eh_frame:0804852D                 db  28h ; (
.eh_frame:0804852E                 db  44h ; D
.eh_frame:0804852F                 db  0Eh
.eh_frame:08048530                 db  2Ch ; ,
.eh_frame:08048531                 db  41h ; A
.eh_frame:08048532                 db  0Eh
.eh_frame:08048533                 db  30h ; 0
.eh_frame:08048534                 db  4Dh ; M
.eh_frame:08048535                 db  0Eh
.eh_frame:08048536                 db  20h
.eh_frame:08048537                 db  47h ; G
.eh_frame:08048538                 db  0Eh
.eh_frame:08048539                 db  14h
.eh_frame:0804853A                 db  41h ; A
.eh_frame:0804853B                 db 0C3h
.eh_frame:0804853C                 db  0Eh
.eh_frame:0804853D                 db  10h
.eh_frame:0804853E                 db  41h ; A
.eh_frame:0804853F                 db 0C6h
.eh_frame:08048540                 db  0Eh
.eh_frame:08048541                 db  0Ch
.eh_frame:08048542                 db  41h ; A
.eh_frame:08048543                 db 0C7h
.eh_frame:08048544                 db  0Eh
.eh_frame:08048545                 db    8
.eh_frame:08048546                 db  41h ; A
.eh_frame:08048547                 db 0C5h
.eh_frame:08048548                 db  0Eh
.eh_frame:08048549                 db    4
.eh_frame:0804854A                 db    0
.eh_frame:0804854B                 db    0
.eh_frame:0804854C                 db  10h
.eh_frame:0804854D                 db    0
.eh_frame:0804854E                 db    0
.eh_frame:0804854F                 db    0
.eh_frame:08048550                 db  8Ch
.eh_frame:08048551                 db    0
.eh_frame:08048552                 db    0
.eh_frame:08048553                 db    0
.eh_frame:08048554                 db  1Ch
.eh_frame:08048555                 db 0FFh
.eh_frame:08048556                 db 0FFh
.eh_frame:08048557                 db 0FFh
.eh_frame:08048558                 db    2
.eh_frame:08048559                 db    0
.eh_frame:0804855A                 db    0
.eh_frame:0804855B                 db    0
.eh_frame:0804855C                 db    0
.eh_frame:0804855D                 db    0
.eh_frame:0804855E                 db    0
.eh_frame:0804855F                 db    0
.eh_frame:08048560 __FRAME_END__   db    0
.eh_frame:08048561                 db    0
.eh_frame:08048562                 db    0
.eh_frame:08048563                 db    0
.eh_frame:08048563 _eh_frame       ends
.eh_frame:08048563
.init_array:08049564 ; ELF Initialization Function Table
.init_array:08049564 ; ===========================================================================
.init_array:08049564
.init_array:08049564 ; Segment type: Pure data
.init_array:08049564 ; Segment permissions: Read/Write
.init_array:08049564 _init_array     segment dword public 'DATA' use32
.init_array:08049564                 assume cs:_init_array
.init_array:08049564                 ;org 8049564h
.init_array:08049564 __frame_dummy_init_array_entry dd offset frame_dummy
.init_array:08049564                                         ; DATA XREF: LOAD:0804809C↑o
.init_array:08049564                                         ; __libc_csu_init+23↑o ...
.init_array:08049564 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:08049564
.fini_array:08049568 ; ELF Termination Function Table
.fini_array:08049568 ; ===========================================================================
.fini_array:08049568
.fini_array:08049568 ; Segment type: Pure data
.fini_array:08049568 ; Segment permissions: Read/Write
.fini_array:08049568 _fini_array     segment dword public 'DATA' use32
.fini_array:08049568                 assume cs:_fini_array
.fini_array:08049568                 ;org 8049568h
.fini_array:08049568 __do_global_dtors_aux_fini_array_entry dd offset __do_global_dtors_aux
.fini_array:08049568                                         ; DATA XREF: __libc_csu_init+18↑o
.fini_array:08049568 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:08049568
.jcr:0804956C ; ===========================================================================
.jcr:0804956C
.jcr:0804956C ; Segment type: Pure data
.jcr:0804956C ; Segment permissions: Read/Write
.jcr:0804956C _jcr            segment dword public 'DATA' use32
.jcr:0804956C                 assume cs:_jcr
.jcr:0804956C                 ;org 804956Ch
.jcr:0804956C __JCR_LIST__    db    0                 ; DATA XREF: frame_dummy↑o
.jcr:0804956D                 db    0
.jcr:0804956E                 db    0
.jcr:0804956F                 db    0
.jcr:0804956F _jcr            ends
.jcr:0804956F
LOAD:08049570 ; ELF Dynamic Information
LOAD:08049570 ; ===========================================================================
LOAD:08049570
LOAD:08049570 ; Segment type: Pure data
LOAD:08049570 ; Segment permissions: Read/Write
LOAD:08049570 LOAD            segment mempage public 'DATA' use32
LOAD:08049570                 assume cs:LOAD
LOAD:08049570                 ;org 8049570h
LOAD:08049570 _DYNAMIC        Elf32_Dyn <1, <1>>      ; DATA XREF: LOAD:080480BC↑o
LOAD:08049570                                         ; .got.plt:_GLOBAL_OFFSET_TABLE_↓o
LOAD:08049570                                         ; DT_NEEDED libc.so.6
LOAD:08049578                 Elf32_Dyn <0Ch, <8048270h>> ; DT_INIT
LOAD:08049580                 Elf32_Dyn <0Dh, <8048474h>> ; DT_FINI
LOAD:08049588                 Elf32_Dyn <19h, <8049564h>> ; DT_INIT_ARRAY
LOAD:08049590                 Elf32_Dyn <1Bh, <4>>    ; DT_INIT_ARRAYSZ
LOAD:08049598                 Elf32_Dyn <1Ah, <8049568h>> ; DT_FINI_ARRAY
LOAD:080495A0                 Elf32_Dyn <1Ch, <4>>    ; DT_FINI_ARRAYSZ
LOAD:080495A8                 Elf32_Dyn <4, <8048168h>> ; DT_HASH
LOAD:080495B0                 Elf32_Dyn <5, <80481E0h>> ; DT_STRTAB
LOAD:080495B8                 Elf32_Dyn <6, <8048190h>> ; DT_SYMTAB
LOAD:080495C0                 Elf32_Dyn <0Ah, <4Ch>>  ; DT_STRSZ
LOAD:080495C8                 Elf32_Dyn <0Bh, <10h>>  ; DT_SYMENT
LOAD:080495D0                 Elf32_Dyn <15h, <0>>    ; DT_DEBUG
LOAD:080495D8                 Elf32_Dyn <3, <804965Ch>> ; DT_PLTGOT
LOAD:080495E0                 Elf32_Dyn <2, <10h>>    ; DT_PLTRELSZ
LOAD:080495E8                 Elf32_Dyn <14h, <11h>>  ; DT_PLTREL
LOAD:080495F0                 Elf32_Dyn <17h, <8048260h>> ; DT_JMPREL
LOAD:080495F8                 Elf32_Dyn <11h, <8048258h>> ; DT_REL
LOAD:08049600                 Elf32_Dyn <12h, <8>>    ; DT_RELSZ
LOAD:08049608                 Elf32_Dyn <13h, <8>>    ; DT_RELENT
LOAD:08049610                 Elf32_Dyn <6FFFFFFEh, <8048238h>> ; DT_VERNEED
LOAD:08049618                 Elf32_Dyn <6FFFFFFFh, <1>> ; DT_VERNEEDNUM
LOAD:08049620                 Elf32_Dyn <6FFFFFF0h, <804822Ch>> ; DT_VERSYM
LOAD:08049628                 Elf32_Dyn <0>           ; DT_NULL
LOAD:08049630                 db    0
LOAD:08049631                 db    0
LOAD:08049632                 db    0
LOAD:08049633                 db    0
LOAD:08049634                 db    0
LOAD:08049635                 db    0
LOAD:08049636                 db    0
LOAD:08049637                 db    0
LOAD:08049638                 db    0
LOAD:08049639                 db    0
LOAD:0804963A                 db    0
LOAD:0804963B                 db    0
LOAD:0804963C                 db    0
LOAD:0804963D                 db    0
LOAD:0804963E                 db    0
LOAD:0804963F                 db    0
LOAD:08049640                 db    0
LOAD:08049641                 db    0
LOAD:08049642                 db    0
LOAD:08049643                 db    0
LOAD:08049644                 db    0
LOAD:08049645                 db    0
LOAD:08049646                 db    0
LOAD:08049647                 db    0
LOAD:08049648                 db    0
LOAD:08049649                 db    0
LOAD:0804964A                 db    0
LOAD:0804964B                 db    0
LOAD:0804964C                 db    0
LOAD:0804964D                 db    0
LOAD:0804964E                 db    0
LOAD:0804964F                 db    0
LOAD:08049650                 db    0
LOAD:08049651                 db    0
LOAD:08049652                 db    0
LOAD:08049653                 db    0
LOAD:08049654                 db    0
LOAD:08049655                 db    0
LOAD:08049656                 db    0
LOAD:08049657                 db    0
LOAD:08049657 LOAD            ends
LOAD:08049657
.got:08049658 ; ===========================================================================
.got:08049658
.got:08049658 ; Segment type: Pure data
.got:08049658 ; Segment permissions: Read/Write
.got:08049658 _got            segment dword public 'DATA' use32
.got:08049658                 assume cs:_got
.got:08049658                 ;org 8049658h
.got:08049658 __gmon_start___ptr dd offset __imp___gmon_start__
.got:08049658                                         ; DATA XREF: _init_proc+F↑r
.got:08049658                                         ; __gmon_start__↑r
.got:08049658 _got            ends
.got:08049658
.got.plt:0804965C ; ===========================================================================
.got.plt:0804965C
.got.plt:0804965C ; Segment type: Pure data
.got.plt:0804965C ; Segment permissions: Read/Write
.got.plt:0804965C _got_plt        segment dword public 'DATA' use32
.got.plt:0804965C                 assume cs:_got_plt
.got.plt:0804965C                 ;org 804965Ch
.got.plt:0804965C _GLOBAL_OFFSET_TABLE_ dd offset _DYNAMIC
.got.plt:08049660 dword_8049660   dd 0                    ; DATA XREF: sub_80482A0↑r
.got.plt:08049664 dword_8049664   dd 0                    ; DATA XREF: sub_80482A0+6↑r
.got.plt:08049668 off_8049668     dd offset printf        ; DATA XREF: _printf↑r
.got.plt:0804966C off_804966C     dd offset __libc_start_main
.got.plt:0804966C                                         ; DATA XREF: ___libc_start_main↑r
.got.plt:0804966C _got_plt        ends
.got.plt:0804966C
.data:08049670 ; ===========================================================================
.data:08049670
.data:08049670 ; Segment type: Pure data
.data:08049670 ; Segment permissions: Read/Write
.data:08049670 _data           segment dword public 'DATA' use32
.data:08049670                 assume cs:_data
.data:08049670                 ;org 8049670h
.data:08049670                 public __data_start ; weak
.data:08049670 __data_start    db    0                 ; Alternative name is '__data_start'
.data:08049670                                         ; data_start
.data:08049671                 db    0
.data:08049672                 db    0
.data:08049673                 db    0
.data:08049674                 public __dso_handle
.data:08049674 __dso_handle    db    0
.data:08049675                 db    0
.data:08049676                 db    0
.data:08049677                 db    0
.data:08049677 _data           ends
.data:08049677
.bss:08049678 ; ===========================================================================
.bss:08049678
.bss:08049678 ; Segment type: Uninitialized
.bss:08049678 ; Segment permissions: Read/Write
.bss:08049678 _bss            segment dword public 'BSS' use32
.bss:08049678                 assume cs:_bss
.bss:08049678                 ;org 8049678h
.bss:08049678                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:08049678                 public __bss_start
.bss:08049678 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones+5↑o
.bss:08049678                                         ; deregister_tm_clones+1E↑o ...
.bss:08049678                                         ; Alternative name is '__TMC_END__'
.bss:08049678                                         ; completed.6584
.bss:08049678                                         ; _edata
.bss:08049679                 db    ? ;
.bss:0804967A                 db    ? ;
.bss:0804967B unk_804967B     db    ? ;               ; DATA XREF: deregister_tm_clones↑o
.bss:0804967B _bss            ends
.bss:0804967B
.prgend:0804967C ; ===========================================================================
.prgend:0804967C
.prgend:0804967C ; Segment type: Zero-length
.prgend:0804967C _prgend         segment byte public '' use32
.prgend:0804967C _end            label byte
.prgend:0804967C _prgend         ends
.prgend:0804967C
extern:08049680 ; ===========================================================================
extern:08049680
extern:08049680 ; Segment type: Externs
extern:08049680 ; extern
extern:08049680                 extrn printf:near       ; CODE XREF: _printf↑j
extern:08049680                                         ; DATA XREF: .got.plt:off_8049668↑o
extern:08049684 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:08049684                 extrn __libc_start_main:near
extern:08049684                                         ; CODE XREF: ___libc_start_main↑j
extern:08049684                                         ; DATA XREF: .got.plt:off_804966C↑o
extern:08049688                 extrn __imp___gmon_start__:near ; weak
extern:08049688                                         ; CODE XREF: __gmon_start__↑j
extern:08049688                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:08049688
extern:08049688
extern:08049688                 end _start