LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
LOAD:0000000000000000 ; |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                            Freeware version                             |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 3CAEE266629EAA64839B154CEF5BA4AA73D9ABD271F8A53D7784136E9F3E58B8
LOAD:0000000000000000 ; Input MD5    : 01B48DEF2CC4981AC644764408FB123A
LOAD:0000000000000000 ; Input CRC32  : DB0D4582
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /Users/heynard/woody_woodpacker/sample
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'main.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002D0↓o
LOAD:0000000000000000                                         ; LOAD:00000000000002E8↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset _start        ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 1A00h                ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 1Fh                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 1Eh                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 5                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 8ACh                 ; Size in file image
LOAD:00000000000000D8                 dq 8ACh                 ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0DD8h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100                 dq 200DD8h              ; Physical address
LOAD:0000000000000108                 dq 258h                 ; Size in file image
LOAD:0000000000000110                 dq 260h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0DF0h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 200DF0h              ; Physical address
LOAD:0000000000000140                 dq 1E0h                 ; Size in file image
LOAD:0000000000000148                 dq 1E0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 764h                 ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 764h                 ; Physical address
LOAD:00000000000001B0                 dq 3Ch                  ; Size in file image
LOAD:00000000000001B8                 dq 3Ch                  ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0DD8h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 200DD8h              ; Physical address
LOAD:0000000000000220                 dq 228h                 ; Size in file image
LOAD:0000000000000228                 dq 228h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000258                 dq 100000010h, 554E47h, 600000002h, 400000020h, 300000014h
LOAD:0000000000000258                 dq 473DABF400554E47h, 9B7518D5BDBB2F0Fh, 26A7D90C96903C8Bh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 1
LOAD:000000000000029C elf_gnu_hash_symbias dd 1
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 0
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 0
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 0
LOAD:00000000000002B4 elf_gnu_hash_chain dd 0
LOAD:00000000000002B8 ; ELF Symbol Table
LOAD:00000000000002B8                 Elf64_Sym <0>
LOAD:00000000000002D0                 Elf64_Sym <offset aItmDeregistert - offset byte_378, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000002D0                            offset dword_0, 0>
LOAD:00000000000002E8                 Elf64_Sym <offset aPuts - offset byte_378, 12h, 0, 0, offset dword_0, \ ; "puts"
LOAD:00000000000002E8                            0>
LOAD:0000000000000300                 Elf64_Sym <offset aLibcStartMain - offset byte_378, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000300                            offset dword_0, 0>
LOAD:0000000000000318                 Elf64_Sym <offset aGmonStart - offset byte_378, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000318                            offset dword_0, 0>
LOAD:0000000000000330                 Elf64_Sym <offset aJvRegisterclas - offset byte_378, 20h, 0, 0, \ ; "_Jv_RegisterClasses"
LOAD:0000000000000330                            offset dword_0, 0>
LOAD:0000000000000348                 Elf64_Sym <offset aItmRegistertmc - offset byte_378, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000348                            offset dword_0, 0>
LOAD:0000000000000360                 Elf64_Sym <offset aCxaFinalize - offset byte_378, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000360                            offset dword_0, 0>
LOAD:0000000000000378 ; ELF String Table
LOAD:0000000000000378 byte_378        db 0                    ; DATA XREF: LOAD:00000000000002D0↑o
LOAD:0000000000000378                                         ; LOAD:00000000000002E8↑o ...
LOAD:0000000000000379 aLibcSo6        db 'libc.so.6',0
LOAD:0000000000000383 aPuts           db 'puts',0             ; DATA XREF: LOAD:00000000000002E8↑o
LOAD:0000000000000388 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000360↑o
LOAD:0000000000000397 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000397                                         ; DATA XREF: LOAD:0000000000000300↑o
LOAD:00000000000003A9 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:00000000000003A9                                         ; DATA XREF: LOAD:00000000000002D0↑o
LOAD:00000000000003C5 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000318↑o
LOAD:00000000000003D4 aJvRegisterclas db '_Jv_RegisterClasses',0
LOAD:00000000000003D4                                         ; DATA XREF: LOAD:0000000000000330↑o
LOAD:00000000000003E8 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:00000000000003E8                                         ; DATA XREF: LOAD:0000000000000348↑o
LOAD:0000000000000402 aGlibc225       db 'GLIBC_2.2.5',0
LOAD:000000000000040E                 align 10h
LOAD:0000000000000410                 dq 200020000h, 200000000h, 100010001h, 10h, 2000009691A75h
LOAD:0000000000000410                 dq 8Ah
LOAD:0000000000000440 ; ELF RELA Relocation Table
LOAD:0000000000000440                 Elf64_Rela <200DD8h, 8, 680h> ; R_X86_64_RELATIVE
LOAD:0000000000000458                 Elf64_Rela <200DE0h, 8, 640h> ; R_X86_64_RELATIVE
LOAD:0000000000000470                 Elf64_Rela <201028h, 8, 201028h> ; R_X86_64_RELATIVE
LOAD:0000000000000488                 Elf64_Rela <200FD0h, 100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:00000000000004A0                 Elf64_Rela <200FD8h, 300000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:00000000000004B8                 Elf64_Rela <200FE0h, 400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:00000000000004D0                 Elf64_Rela <200FE8h, 500000006h, 0> ; R_X86_64_GLOB_DAT _Jv_RegisterClasses
LOAD:00000000000004E8                 Elf64_Rela <200FF0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000500                 Elf64_Rela <200FF8h, 700000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000518 ; ELF JMPREL Relocation Table
LOAD:0000000000000518                 Elf64_Rela <201018h, 200000007h, 0> ; R_X86_64_JUMP_SLOT puts
LOAD:0000000000000518 LOAD            ends
LOAD:0000000000000518
.init:0000000000000530 ; ===========================================================================
.init:0000000000000530
.init:0000000000000530 ; Segment type: Pure code
.init:0000000000000530 ; Segment permissions: Read/Execute
.init:0000000000000530 _init           segment dword public 'CODE' use64
.init:0000000000000530                 assume cs:_init
.init:0000000000000530                 ;org 530h
.init:0000000000000530                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000000530
.init:0000000000000530 ; =============== S U B R O U T I N E =======================================
.init:0000000000000530
.init:0000000000000530
.init:0000000000000530                 public _init_proc
.init:0000000000000530 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000000530                 sub     rsp, 8          ; _init
.init:0000000000000534                 mov     rax, cs:__gmon_start___ptr
.init:000000000000053B                 test    rax, rax
.init:000000000000053E                 jz      short loc_542
.init:0000000000000540                 call    rax ; __gmon_start__
.init:0000000000000542
.init:0000000000000542 loc_542:                                ; CODE XREF: _init_proc+E↑j
.init:0000000000000542                 add     rsp, 8
.init:0000000000000546                 retn
.init:0000000000000546 _init_proc      endp
.init:0000000000000546
.init:0000000000000546 _init           ends
.init:0000000000000546
LOAD:0000000000000547 ; ===========================================================================
LOAD:0000000000000547
LOAD:0000000000000547 ; Segment type: Pure code
LOAD:0000000000000547 ; Segment permissions: Read/Execute
LOAD:0000000000000547 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000547                 assume cs:LOAD
LOAD:0000000000000547                 ;org 547h
LOAD:0000000000000547                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000547                 align 10h
LOAD:0000000000000547 LOAD            ends
LOAD:0000000000000547
.plt:0000000000000550 ; ===========================================================================
.plt:0000000000000550
.plt:0000000000000550 ; Segment type: Pure code
.plt:0000000000000550 ; Segment permissions: Read/Execute
.plt:0000000000000550 _plt            segment para public 'CODE' use64
.plt:0000000000000550                 assume cs:_plt
.plt:0000000000000550                 ;org 550h
.plt:0000000000000550                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000000550
.plt:0000000000000550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000000550
.plt:0000000000000550
.plt:0000000000000550 sub_550         proc near               ; CODE XREF: .plt:000000000000056B↓j
.plt:0000000000000550                 push    cs:qword_201008
.plt:0000000000000556                 jmp     cs:qword_201010
.plt:0000000000000556 sub_550         endp
.plt:0000000000000556
.plt:0000000000000556 ; ---------------------------------------------------------------------------
.plt:000000000000055C                 align 20h
.plt:0000000000000560 ; [00000006 BYTES: COLLAPSED FUNCTION _puts. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:0000000000000566 ; ---------------------------------------------------------------------------
.plt:0000000000000566                 push    0
.plt:000000000000056B                 jmp     sub_550
.plt:000000000000056B _plt            ends
.plt:000000000000056B
.plt.got:0000000000000570 ; ===========================================================================
.plt.got:0000000000000570
.plt.got:0000000000000570 ; Segment type: Pure code
.plt.got:0000000000000570 ; Segment permissions: Read/Execute
.plt.got:0000000000000570 ; Segment alignment 'qword' can not be represented in assembly
.plt.got:0000000000000570 _plt_got        segment para public 'CODE' use64
.plt.got:0000000000000570                 assume cs:_plt_got
.plt.got:0000000000000570                 ;org 570h
.plt.got:0000000000000570                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000000570 ; [00000006 BYTES: COLLAPSED FUNCTION __cxa_finalize. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt.got:0000000000000576                 align 8
.plt.got:0000000000000576 _plt_got        ends
.plt.got:0000000000000576
LOAD:0000000000000578 ; ===========================================================================
LOAD:0000000000000578
LOAD:0000000000000578 ; Segment type: Pure code
LOAD:0000000000000578 ; Segment permissions: Read/Execute
LOAD:0000000000000578 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000578                 assume cs:LOAD
LOAD:0000000000000578                 ;org 578h
LOAD:0000000000000578                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000578                 align 20h
LOAD:0000000000000578 LOAD            ends
LOAD:0000000000000578
.text:0000000000000580 ; ===========================================================================
.text:0000000000000580
.text:0000000000000580 ; Segment type: Pure code
.text:0000000000000580 ; Segment permissions: Read/Execute
.text:0000000000000580 _text           segment para public 'CODE' use64
.text:0000000000000580                 assume cs:_text
.text:0000000000000580                 ;org 580h
.text:0000000000000580                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000000580
.text:0000000000000580 ; =============== S U B R O U T I N E =======================================
.text:0000000000000580
.text:0000000000000580 ; Attributes: noreturn fuzzy-sp
.text:0000000000000580
.text:0000000000000580                 public _start
.text:0000000000000580 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000000580                 xor     ebp, ebp
.text:0000000000000582                 mov     r9, rdx         ; rtld_fini
.text:0000000000000585                 pop     rsi             ; argc
.text:0000000000000586                 mov     rdx, rsp        ; ubp_av
.text:0000000000000589                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000058D                 push    rax
.text:000000000000058E                 push    rsp             ; stack_end
.text:000000000000058F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000000596                 lea     rcx, __libc_csu_init ; init
.text:000000000000059D                 lea     rdi, main       ; main
.text:00000000000005A4                 call    cs:__libc_start_main_ptr
.text:00000000000005AA                 hlt
.text:00000000000005AA _start          endp
.text:00000000000005AA
.text:00000000000005AA ; ---------------------------------------------------------------------------
.text:00000000000005AB                 align 10h
.text:00000000000005B0
.text:00000000000005B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000005B0
.text:00000000000005B0 ; Attributes: bp-based frame
.text:00000000000005B0
.text:00000000000005B0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_663↓p
.text:00000000000005B0                 lea     rdi, __bss_start
.text:00000000000005B7                 lea     rax, unk_201037
.text:00000000000005BE                 push    rbp
.text:00000000000005BF                 sub     rax, rdi
.text:00000000000005C2                 mov     rbp, rsp
.text:00000000000005C5                 cmp     rax, 0Eh
.text:00000000000005C9                 jbe     short loc_5E0
.text:00000000000005CB                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000005D2                 test    rax, rax
.text:00000000000005D5                 jz      short loc_5E0
.text:00000000000005D7                 pop     rbp
.text:00000000000005D8                 jmp     rax
.text:00000000000005D8 ; ---------------------------------------------------------------------------
.text:00000000000005DA                 align 20h
.text:00000000000005E0
.text:00000000000005E0 loc_5E0:                                ; CODE XREF: deregister_tm_clones+19↑j
.text:00000000000005E0                                         ; deregister_tm_clones+25↑j
.text:00000000000005E0                 pop     rbp
.text:00000000000005E1                 retn
.text:00000000000005E1 deregister_tm_clones endp
.text:00000000000005E1
.text:00000000000005E1 ; ---------------------------------------------------------------------------
.text:00000000000005E2                 align 10h
.text:00000000000005F0
.text:00000000000005F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000005F0
.text:00000000000005F0 ; Attributes: bp-based frame
.text:00000000000005F0
.text:00000000000005F0 register_tm_clones proc near            ; CODE XREF: frame_dummy:loc_68D↓j
.text:00000000000005F0                                         ; frame_dummy+2B↓j
.text:00000000000005F0                 lea     rdi, __bss_start
.text:00000000000005F7                 lea     rsi, __bss_start
.text:00000000000005FE                 push    rbp
.text:00000000000005FF                 sub     rsi, rdi
.text:0000000000000602                 mov     rbp, rsp
.text:0000000000000605                 sar     rsi, 3
.text:0000000000000609                 mov     rax, rsi
.text:000000000000060C                 shr     rax, 3Fh
.text:0000000000000610                 add     rsi, rax
.text:0000000000000613                 sar     rsi, 1
.text:0000000000000616                 jz      short loc_630
.text:0000000000000618                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000061F                 test    rax, rax
.text:0000000000000622                 jz      short loc_630
.text:0000000000000624                 pop     rbp
.text:0000000000000625                 jmp     rax
.text:0000000000000625 ; ---------------------------------------------------------------------------
.text:0000000000000627                 align 10h
.text:0000000000000630
.text:0000000000000630 loc_630:                                ; CODE XREF: register_tm_clones+26↑j
.text:0000000000000630                                         ; register_tm_clones+32↑j
.text:0000000000000630                 pop     rbp
.text:0000000000000631                 retn
.text:0000000000000631 register_tm_clones endp
.text:0000000000000631
.text:0000000000000631 ; ---------------------------------------------------------------------------
.text:0000000000000632                 align 20h
.text:0000000000000640
.text:0000000000000640 ; =============== S U B R O U T I N E =======================================
.text:0000000000000640
.text:0000000000000640
.text:0000000000000640 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000000640                 cmp     cs:__bss_start, 0
.text:0000000000000647                 jnz     short locret_670
.text:0000000000000649                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000000651                 push    rbp
.text:0000000000000652                 mov     rbp, rsp
.text:0000000000000655                 jz      short loc_663
.text:0000000000000657                 mov     rdi, cs:__dso_handle
.text:000000000000065E                 call    __cxa_finalize
.text:0000000000000663
.text:0000000000000663 loc_663:                                ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000000663                 call    deregister_tm_clones
.text:0000000000000668                 pop     rbp
.text:0000000000000669                 mov     cs:__bss_start, 1
.text:0000000000000670
.text:0000000000000670 locret_670:                             ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000000670                 rep retn
.text:0000000000000670 __do_global_dtors_aux endp
.text:0000000000000670
.text:0000000000000670 ; ---------------------------------------------------------------------------
.text:0000000000000672                 align 20h
.text:0000000000000680
.text:0000000000000680 ; =============== S U B R O U T I N E =======================================
.text:0000000000000680
.text:0000000000000680
.text:0000000000000680 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000000680                 lea     rdi, __JCR_LIST__
.text:0000000000000687                 cmp     qword ptr [rdi], 0
.text:000000000000068B                 jnz     short loc_698
.text:000000000000068D
.text:000000000000068D loc_68D:                                ; CODE XREF: frame_dummy+22↓j
.text:000000000000068D                 jmp     register_tm_clones
.text:000000000000068D ; ---------------------------------------------------------------------------
.text:0000000000000692                 align 8
.text:0000000000000698
.text:0000000000000698 loc_698:                                ; CODE XREF: frame_dummy+B↑j
.text:0000000000000698                 mov     rax, cs:_Jv_RegisterClasses_ptr
.text:000000000000069F                 test    rax, rax
.text:00000000000006A2                 jz      short loc_68D
.text:00000000000006A4                 push    rbp
.text:00000000000006A5                 mov     rbp, rsp
.text:00000000000006A8                 call    rax ; _Jv_RegisterClasses
.text:00000000000006AA                 pop     rbp
.text:00000000000006AB                 jmp     register_tm_clones
.text:00000000000006AB frame_dummy     endp
.text:00000000000006AB
.text:00000000000006B0
.text:00000000000006B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000006B0
.text:00000000000006B0 ; Attributes: bp-based frame
.text:00000000000006B0
.text:00000000000006B0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000006B0                 public main
.text:00000000000006B0 main            proc near               ; DATA XREF: _start+1D↑o
.text:00000000000006B0                 push    rbp
.text:00000000000006B1                 mov     rbp, rsp
.text:00000000000006B4                 lea     rdi, s          ; "Hello World!"
.text:00000000000006BB                 call    _puts
.text:00000000000006C0                 mov     eax, 0
.text:00000000000006C5                 pop     rbp
.text:00000000000006C6                 retn
.text:00000000000006C6 main            endp
.text:00000000000006C6
.text:00000000000006C6 ; ---------------------------------------------------------------------------
.text:00000000000006C7                 align 10h
.text:00000000000006D0
.text:00000000000006D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000006D0
.text:00000000000006D0
.text:00000000000006D0 ; void _libc_csu_init(void)
.text:00000000000006D0                 public __libc_csu_init
.text:00000000000006D0 __libc_csu_init proc near               ; DATA XREF: _start+16↑o
.text:00000000000006D0                 push    r15
.text:00000000000006D2                 push    r14
.text:00000000000006D4                 mov     r15d, edi
.text:00000000000006D7                 push    r13
.text:00000000000006D9                 push    r12
.text:00000000000006DB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000006E2                 push    rbp
.text:00000000000006E3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000006EA                 push    rbx
.text:00000000000006EB                 mov     r14, rsi
.text:00000000000006EE                 mov     r13, rdx
.text:00000000000006F1                 sub     rbp, r12
.text:00000000000006F4                 sub     rsp, 8
.text:00000000000006F8                 sar     rbp, 3
.text:00000000000006FC                 call    _init_proc
.text:0000000000000701                 test    rbp, rbp
.text:0000000000000704                 jz      short loc_726
.text:0000000000000706                 xor     ebx, ebx
.text:0000000000000708                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000000710
.text:0000000000000710 loc_710:                                ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000000710                 mov     rdx, r13
.text:0000000000000713                 mov     rsi, r14
.text:0000000000000716                 mov     edi, r15d
.text:0000000000000719                 call    qword ptr [r12+rbx*8]
.text:000000000000071D                 add     rbx, 1
.text:0000000000000721                 cmp     rbp, rbx
.text:0000000000000724                 jnz     short loc_710
.text:0000000000000726
.text:0000000000000726 loc_726:                                ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000000726                 add     rsp, 8
.text:000000000000072A                 pop     rbx
.text:000000000000072B                 pop     rbp
.text:000000000000072C                 pop     r12
.text:000000000000072E                 pop     r13
.text:0000000000000730                 pop     r14
.text:0000000000000732                 pop     r15
.text:0000000000000734                 retn
.text:0000000000000734 __libc_csu_init endp
.text:0000000000000734
.text:0000000000000734 ; ---------------------------------------------------------------------------
.text:0000000000000735                 align 20h
.text:0000000000000740
.text:0000000000000740 ; =============== S U B R O U T I N E =======================================
.text:0000000000000740
.text:0000000000000740
.text:0000000000000740 ; void _libc_csu_fini(void)
.text:0000000000000740                 public __libc_csu_fini
.text:0000000000000740 __libc_csu_fini proc near               ; DATA XREF: _start+F↑o
.text:0000000000000740                 rep retn
.text:0000000000000740 __libc_csu_fini endp
.text:0000000000000740
.text:0000000000000740 _text           ends
.text:0000000000000740
LOAD:0000000000000742 ; ===========================================================================
LOAD:0000000000000742
LOAD:0000000000000742 ; Segment type: Pure code
LOAD:0000000000000742 ; Segment permissions: Read/Execute
LOAD:0000000000000742 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000742                 assume cs:LOAD
LOAD:0000000000000742                 ;org 742h
LOAD:0000000000000742                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000742                 align 4
LOAD:0000000000000742 LOAD            ends
LOAD:0000000000000742
.fini:0000000000000744 ; ===========================================================================
.fini:0000000000000744
.fini:0000000000000744 ; Segment type: Pure code
.fini:0000000000000744 ; Segment permissions: Read/Execute
.fini:0000000000000744 _fini           segment dword public 'CODE' use64
.fini:0000000000000744                 assume cs:_fini
.fini:0000000000000744                 ;org 744h
.fini:0000000000000744                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000000744
.fini:0000000000000744 ; =============== S U B R O U T I N E =======================================
.fini:0000000000000744
.fini:0000000000000744
.fini:0000000000000744                 public _term_proc
.fini:0000000000000744 _term_proc      proc near
.fini:0000000000000744                 sub     rsp, 8          ; _fini
.fini:0000000000000748                 add     rsp, 8
.fini:000000000000074C                 retn
.fini:000000000000074C _term_proc      endp
.fini:000000000000074C
.fini:000000000000074C _fini           ends
.fini:000000000000074C
LOAD:000000000000074D ; ===========================================================================
LOAD:000000000000074D
LOAD:000000000000074D ; Segment type: Pure code
LOAD:000000000000074D ; Segment permissions: Read/Execute
LOAD:000000000000074D LOAD            segment byte public 'CODE' use64
LOAD:000000000000074D                 assume cs:LOAD
LOAD:000000000000074D                 ;org 74Dh
LOAD:000000000000074D                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000074D                 align 10h
LOAD:000000000000074D LOAD            ends
LOAD:000000000000074D
.rodata:0000000000000750 ; ===========================================================================
.rodata:0000000000000750
.rodata:0000000000000750 ; Segment type: Pure data
.rodata:0000000000000750 ; Segment permissions: Read
.rodata:0000000000000750 _rodata         segment dword public 'CONST' use64
.rodata:0000000000000750                 assume cs:_rodata
.rodata:0000000000000750                 ;org 750h
.rodata:0000000000000750                 public _IO_stdin_used
.rodata:0000000000000750 _IO_stdin_used  db    1
.rodata:0000000000000751                 db    0
.rodata:0000000000000752                 db    2
.rodata:0000000000000753                 db    0
.rodata:0000000000000754 ; char s[]
.rodata:0000000000000754 s               db 'Hello World!',0     ; DATA XREF: main+4↑o
.rodata:0000000000000754 _rodata         ends
.rodata:0000000000000754
LOAD:0000000000000761 ; ===========================================================================
LOAD:0000000000000761
LOAD:0000000000000761 ; Segment type: Pure code
LOAD:0000000000000761 ; Segment permissions: Read/Execute
LOAD:0000000000000761 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000761                 assume cs:LOAD
LOAD:0000000000000761                 ;org 761h
LOAD:0000000000000761                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000761                 align 4
LOAD:0000000000000761 LOAD            ends
LOAD:0000000000000761
.eh_frame_hdr:0000000000000764 ; ===========================================================================
.eh_frame_hdr:0000000000000764
.eh_frame_hdr:0000000000000764 ; Segment type: Pure data
.eh_frame_hdr:0000000000000764 ; Segment permissions: Read
.eh_frame_hdr:0000000000000764 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000000764                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000000764                 ;org 764h
.eh_frame_hdr:0000000000000764 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000000765                 db  1Bh
.eh_frame_hdr:0000000000000766                 db    3
.eh_frame_hdr:0000000000000767                 db  3Bh ; ;
.eh_frame_hdr:0000000000000768                 db  38h ; 8
.eh_frame_hdr:0000000000000769                 db    0
.eh_frame_hdr:000000000000076A                 db    0
.eh_frame_hdr:000000000000076B                 db    0
.eh_frame_hdr:000000000000076C                 db    6
.eh_frame_hdr:000000000000076D                 db    0
.eh_frame_hdr:000000000000076E                 db    0
.eh_frame_hdr:000000000000076F                 db    0
.eh_frame_hdr:0000000000000770                 db 0ECh
.eh_frame_hdr:0000000000000771                 db 0FDh
.eh_frame_hdr:0000000000000772                 db 0FFh
.eh_frame_hdr:0000000000000773                 db 0FFh
.eh_frame_hdr:0000000000000774                 db  84h
.eh_frame_hdr:0000000000000775                 db    0
.eh_frame_hdr:0000000000000776                 db    0
.eh_frame_hdr:0000000000000777                 db    0
.eh_frame_hdr:0000000000000778                 db  0Ch
.eh_frame_hdr:0000000000000779                 db 0FEh
.eh_frame_hdr:000000000000077A                 db 0FFh
.eh_frame_hdr:000000000000077B                 db 0FFh
.eh_frame_hdr:000000000000077C                 db 0ACh
.eh_frame_hdr:000000000000077D                 db    0
.eh_frame_hdr:000000000000077E                 db    0
.eh_frame_hdr:000000000000077F                 db    0
.eh_frame_hdr:0000000000000780                 db  1Ch
.eh_frame_hdr:0000000000000781                 db 0FEh
.eh_frame_hdr:0000000000000782                 db 0FFh
.eh_frame_hdr:0000000000000783                 db 0FFh
.eh_frame_hdr:0000000000000784                 db  54h ; T
.eh_frame_hdr:0000000000000785                 db    0
.eh_frame_hdr:0000000000000786                 db    0
.eh_frame_hdr:0000000000000787                 db    0
.eh_frame_hdr:0000000000000788                 db  4Ch ; L
.eh_frame_hdr:0000000000000789                 db 0FFh
.eh_frame_hdr:000000000000078A                 db 0FFh
.eh_frame_hdr:000000000000078B                 db 0FFh
.eh_frame_hdr:000000000000078C                 db 0C4h
.eh_frame_hdr:000000000000078D                 db    0
.eh_frame_hdr:000000000000078E                 db    0
.eh_frame_hdr:000000000000078F                 db    0
.eh_frame_hdr:0000000000000790                 db  6Ch ; l
.eh_frame_hdr:0000000000000791                 db 0FFh
.eh_frame_hdr:0000000000000792                 db 0FFh
.eh_frame_hdr:0000000000000793                 db 0FFh
.eh_frame_hdr:0000000000000794                 db 0E4h
.eh_frame_hdr:0000000000000795                 db    0
.eh_frame_hdr:0000000000000796                 db    0
.eh_frame_hdr:0000000000000797                 db    0
.eh_frame_hdr:0000000000000798                 db 0DCh
.eh_frame_hdr:0000000000000799                 db 0FFh
.eh_frame_hdr:000000000000079A                 db 0FFh
.eh_frame_hdr:000000000000079B                 db 0FFh
.eh_frame_hdr:000000000000079C                 db  2Ch ; ,
.eh_frame_hdr:000000000000079D                 db    1
.eh_frame_hdr:000000000000079E                 db    0
.eh_frame_hdr:000000000000079F                 db    0
.eh_frame_hdr:000000000000079F _eh_frame_hdr   ends
.eh_frame_hdr:000000000000079F
.eh_frame:00000000000007A0 ; ===========================================================================
.eh_frame:00000000000007A0
.eh_frame:00000000000007A0 ; Segment type: Pure data
.eh_frame:00000000000007A0 ; Segment permissions: Read
.eh_frame:00000000000007A0 ; Segment alignment 'qword' can not be represented in assembly
.eh_frame:00000000000007A0 _eh_frame       segment para public 'CONST' use64
.eh_frame:00000000000007A0                 assume cs:_eh_frame
.eh_frame:00000000000007A0                 ;org 7A0h
.eh_frame:00000000000007A0                 db  14h
.eh_frame:00000000000007A1                 db    0
.eh_frame:00000000000007A2                 db    0
.eh_frame:00000000000007A3                 db    0
.eh_frame:00000000000007A4                 db    0
.eh_frame:00000000000007A5                 db    0
.eh_frame:00000000000007A6                 db    0
.eh_frame:00000000000007A7                 db    0
.eh_frame:00000000000007A8                 db    1
.eh_frame:00000000000007A9                 db  7Ah ; z
.eh_frame:00000000000007AA                 db  52h ; R
.eh_frame:00000000000007AB                 db    0
.eh_frame:00000000000007AC                 db    1
.eh_frame:00000000000007AD                 db  78h ; x
.eh_frame:00000000000007AE                 db  10h
.eh_frame:00000000000007AF                 db    1
.eh_frame:00000000000007B0                 db  1Bh
.eh_frame:00000000000007B1                 db  0Ch
.eh_frame:00000000000007B2                 db    7
.eh_frame:00000000000007B3                 db    8
.eh_frame:00000000000007B4                 db  90h
.eh_frame:00000000000007B5                 db    1
.eh_frame:00000000000007B6                 db    7
.eh_frame:00000000000007B7                 db  10h
.eh_frame:00000000000007B8                 db  14h
.eh_frame:00000000000007B9                 db    0
.eh_frame:00000000000007BA                 db    0
.eh_frame:00000000000007BB                 db    0
.eh_frame:00000000000007BC                 db  1Ch
.eh_frame:00000000000007BD                 db    0
.eh_frame:00000000000007BE                 db    0
.eh_frame:00000000000007BF                 db    0
.eh_frame:00000000000007C0                 db 0C0h
.eh_frame:00000000000007C1                 db 0FDh
.eh_frame:00000000000007C2                 db 0FFh
.eh_frame:00000000000007C3                 db 0FFh
.eh_frame:00000000000007C4                 db  2Bh ; +
.eh_frame:00000000000007C5                 db    0
.eh_frame:00000000000007C6                 db    0
.eh_frame:00000000000007C7                 db    0
.eh_frame:00000000000007C8                 db    0
.eh_frame:00000000000007C9                 db    0
.eh_frame:00000000000007CA                 db    0
.eh_frame:00000000000007CB                 db    0
.eh_frame:00000000000007CC                 db    0
.eh_frame:00000000000007CD                 db    0
.eh_frame:00000000000007CE                 db    0
.eh_frame:00000000000007CF                 db    0
.eh_frame:00000000000007D0                 db  14h
.eh_frame:00000000000007D1                 db    0
.eh_frame:00000000000007D2                 db    0
.eh_frame:00000000000007D3                 db    0
.eh_frame:00000000000007D4                 db    0
.eh_frame:00000000000007D5                 db    0
.eh_frame:00000000000007D6                 db    0
.eh_frame:00000000000007D7                 db    0
.eh_frame:00000000000007D8                 db    1
.eh_frame:00000000000007D9                 db  7Ah ; z
.eh_frame:00000000000007DA                 db  52h ; R
.eh_frame:00000000000007DB                 db    0
.eh_frame:00000000000007DC                 db    1
.eh_frame:00000000000007DD                 db  78h ; x
.eh_frame:00000000000007DE                 db  10h
.eh_frame:00000000000007DF                 db    1
.eh_frame:00000000000007E0                 db  1Bh
.eh_frame:00000000000007E1                 db  0Ch
.eh_frame:00000000000007E2                 db    7
.eh_frame:00000000000007E3                 db    8
.eh_frame:00000000000007E4                 db  90h
.eh_frame:00000000000007E5                 db    1
.eh_frame:00000000000007E6                 db    0
.eh_frame:00000000000007E7                 db    0
.eh_frame:00000000000007E8                 db  24h ; $
.eh_frame:00000000000007E9                 db    0
.eh_frame:00000000000007EA                 db    0
.eh_frame:00000000000007EB                 db    0
.eh_frame:00000000000007EC                 db  1Ch
.eh_frame:00000000000007ED                 db    0
.eh_frame:00000000000007EE                 db    0
.eh_frame:00000000000007EF                 db    0
.eh_frame:00000000000007F0                 db  60h ; `
.eh_frame:00000000000007F1                 db 0FDh
.eh_frame:00000000000007F2                 db 0FFh
.eh_frame:00000000000007F3                 db 0FFh
.eh_frame:00000000000007F4                 db  20h
.eh_frame:00000000000007F5                 db    0
.eh_frame:00000000000007F6                 db    0
.eh_frame:00000000000007F7                 db    0
.eh_frame:00000000000007F8                 db    0
.eh_frame:00000000000007F9                 db  0Eh
.eh_frame:00000000000007FA                 db  10h
.eh_frame:00000000000007FB                 db  46h ; F
.eh_frame:00000000000007FC                 db  0Eh
.eh_frame:00000000000007FD                 db  18h
.eh_frame:00000000000007FE                 db  4Ah ; J
.eh_frame:00000000000007FF                 db  0Fh
.eh_frame:0000000000000800                 db  0Bh
.eh_frame:0000000000000801                 db  77h ; w
.eh_frame:0000000000000802                 db    8
.eh_frame:0000000000000803                 db  80h
.eh_frame:0000000000000804                 db    0
.eh_frame:0000000000000805                 db  3Fh ; ?
.eh_frame:0000000000000806                 db  1Ah
.eh_frame:0000000000000807                 db  3Bh ; ;
.eh_frame:0000000000000808                 db  2Ah ; *
.eh_frame:0000000000000809                 db  33h ; 3
.eh_frame:000000000000080A                 db  24h ; $
.eh_frame:000000000000080B                 db  22h ; "
.eh_frame:000000000000080C                 db    0
.eh_frame:000000000000080D                 db    0
.eh_frame:000000000000080E                 db    0
.eh_frame:000000000000080F                 db    0
.eh_frame:0000000000000810                 db  14h
.eh_frame:0000000000000811                 db    0
.eh_frame:0000000000000812                 db    0
.eh_frame:0000000000000813                 db    0
.eh_frame:0000000000000814                 db  44h ; D
.eh_frame:0000000000000815                 db    0
.eh_frame:0000000000000816                 db    0
.eh_frame:0000000000000817                 db    0
.eh_frame:0000000000000818                 db  58h ; X
.eh_frame:0000000000000819                 db 0FDh
.eh_frame:000000000000081A                 db 0FFh
.eh_frame:000000000000081B                 db 0FFh
.eh_frame:000000000000081C                 db    8
.eh_frame:000000000000081D                 db    0
.eh_frame:000000000000081E                 db    0
.eh_frame:000000000000081F                 db    0
.eh_frame:0000000000000820                 db    0
.eh_frame:0000000000000821                 db    0
.eh_frame:0000000000000822                 db    0
.eh_frame:0000000000000823                 db    0
.eh_frame:0000000000000824                 db    0
.eh_frame:0000000000000825                 db    0
.eh_frame:0000000000000826                 db    0
.eh_frame:0000000000000827                 db    0
.eh_frame:0000000000000828                 db  1Ch
.eh_frame:0000000000000829                 db    0
.eh_frame:000000000000082A                 db    0
.eh_frame:000000000000082B                 db    0
.eh_frame:000000000000082C                 db  5Ch ; \
.eh_frame:000000000000082D                 db    0
.eh_frame:000000000000082E                 db    0
.eh_frame:000000000000082F                 db    0
.eh_frame:0000000000000830                 db  80h
.eh_frame:0000000000000831                 db 0FEh
.eh_frame:0000000000000832                 db 0FFh
.eh_frame:0000000000000833                 db 0FFh
.eh_frame:0000000000000834                 db  17h
.eh_frame:0000000000000835                 db    0
.eh_frame:0000000000000836                 db    0
.eh_frame:0000000000000837                 db    0
.eh_frame:0000000000000838                 db    0
.eh_frame:0000000000000839                 db  41h ; A
.eh_frame:000000000000083A                 db  0Eh
.eh_frame:000000000000083B                 db  10h
.eh_frame:000000000000083C                 db  86h
.eh_frame:000000000000083D                 db    2
.eh_frame:000000000000083E                 db  43h ; C
.eh_frame:000000000000083F                 db  0Dh
.eh_frame:0000000000000840                 db    6
.eh_frame:0000000000000841                 db  52h ; R
.eh_frame:0000000000000842                 db  0Ch
.eh_frame:0000000000000843                 db    7
.eh_frame:0000000000000844                 db    8
.eh_frame:0000000000000845                 db    0
.eh_frame:0000000000000846                 db    0
.eh_frame:0000000000000847                 db    0
.eh_frame:0000000000000848                 db  44h ; D
.eh_frame:0000000000000849                 db    0
.eh_frame:000000000000084A                 db    0
.eh_frame:000000000000084B                 db    0
.eh_frame:000000000000084C                 db  7Ch ; |
.eh_frame:000000000000084D                 db    0
.eh_frame:000000000000084E                 db    0
.eh_frame:000000000000084F                 db    0
.eh_frame:0000000000000850                 db  80h
.eh_frame:0000000000000851                 db 0FEh
.eh_frame:0000000000000852                 db 0FFh
.eh_frame:0000000000000853                 db 0FFh
.eh_frame:0000000000000854                 db  65h ; e
.eh_frame:0000000000000855                 db    0
.eh_frame:0000000000000856                 db    0
.eh_frame:0000000000000857                 db    0
.eh_frame:0000000000000858                 db    0
.eh_frame:0000000000000859                 db  42h ; B
.eh_frame:000000000000085A                 db  0Eh
.eh_frame:000000000000085B                 db  10h
.eh_frame:000000000000085C                 db  8Fh
.eh_frame:000000000000085D                 db    2
.eh_frame:000000000000085E                 db  42h ; B
.eh_frame:000000000000085F                 db  0Eh
.eh_frame:0000000000000860                 db  18h
.eh_frame:0000000000000861                 db  8Eh
.eh_frame:0000000000000862                 db    3
.eh_frame:0000000000000863                 db  45h ; E
.eh_frame:0000000000000864                 db  0Eh
.eh_frame:0000000000000865                 db  20h
.eh_frame:0000000000000866                 db  8Dh
.eh_frame:0000000000000867                 db    4
.eh_frame:0000000000000868                 db  42h ; B
.eh_frame:0000000000000869                 db  0Eh
.eh_frame:000000000000086A                 db  28h ; (
.eh_frame:000000000000086B                 db  8Ch
.eh_frame:000000000000086C                 db    5
.eh_frame:000000000000086D                 db  48h ; H
.eh_frame:000000000000086E                 db  0Eh
.eh_frame:000000000000086F                 db  30h ; 0
.eh_frame:0000000000000870                 db  86h
.eh_frame:0000000000000871                 db    6
.eh_frame:0000000000000872                 db  48h ; H
.eh_frame:0000000000000873                 db  0Eh
.eh_frame:0000000000000874                 db  38h ; 8
.eh_frame:0000000000000875                 db  83h
.eh_frame:0000000000000876                 db    7
.eh_frame:0000000000000877                 db  4Dh ; M
.eh_frame:0000000000000878                 db  0Eh
.eh_frame:0000000000000879                 db  40h ; @
.eh_frame:000000000000087A                 db  72h ; r
.eh_frame:000000000000087B                 db  0Eh
.eh_frame:000000000000087C                 db  38h ; 8
.eh_frame:000000000000087D                 db  41h ; A
.eh_frame:000000000000087E                 db  0Eh
.eh_frame:000000000000087F                 db  30h ; 0
.eh_frame:0000000000000880                 db  41h ; A
.eh_frame:0000000000000881                 db  0Eh
.eh_frame:0000000000000882                 db  28h ; (
.eh_frame:0000000000000883                 db  42h ; B
.eh_frame:0000000000000884                 db  0Eh
.eh_frame:0000000000000885                 db  20h
.eh_frame:0000000000000886                 db  42h ; B
.eh_frame:0000000000000887                 db  0Eh
.eh_frame:0000000000000888                 db  18h
.eh_frame:0000000000000889                 db  42h ; B
.eh_frame:000000000000088A                 db  0Eh
.eh_frame:000000000000088B                 db  10h
.eh_frame:000000000000088C                 db  42h ; B
.eh_frame:000000000000088D                 db  0Eh
.eh_frame:000000000000088E                 db    8
.eh_frame:000000000000088F                 db    0
.eh_frame:0000000000000890                 db  14h
.eh_frame:0000000000000891                 db    0
.eh_frame:0000000000000892                 db    0
.eh_frame:0000000000000893                 db    0
.eh_frame:0000000000000894                 db 0C4h
.eh_frame:0000000000000895                 db    0
.eh_frame:0000000000000896                 db    0
.eh_frame:0000000000000897                 db    0
.eh_frame:0000000000000898                 db 0A8h
.eh_frame:0000000000000899                 db 0FEh
.eh_frame:000000000000089A                 db 0FFh
.eh_frame:000000000000089B                 db 0FFh
.eh_frame:000000000000089C                 db    2
.eh_frame:000000000000089D                 db    0
.eh_frame:000000000000089E                 db    0
.eh_frame:000000000000089F                 db    0
.eh_frame:00000000000008A0                 db    0
.eh_frame:00000000000008A1                 db    0
.eh_frame:00000000000008A2                 db    0
.eh_frame:00000000000008A3                 db    0
.eh_frame:00000000000008A4                 db    0
.eh_frame:00000000000008A5                 db    0
.eh_frame:00000000000008A6                 db    0
.eh_frame:00000000000008A7                 db    0
.eh_frame:00000000000008A8 __FRAME_END__   db    0
.eh_frame:00000000000008A9                 db    0
.eh_frame:00000000000008AA                 db    0
.eh_frame:00000000000008AB                 db    0
.eh_frame:00000000000008AB _eh_frame       ends
.eh_frame:00000000000008AB
.init_array:0000000000200DD8 ; ELF Initialization Function Table
.init_array:0000000000200DD8 ; ===========================================================================
.init_array:0000000000200DD8
.init_array:0000000000200DD8 ; Segment type: Pure data
.init_array:0000000000200DD8 ; Segment permissions: Read/Write
.init_array:0000000000200DD8 ; Segment alignment 'qword' can not be represented in assembly
.init_array:0000000000200DD8 _init_array     segment para public 'DATA' use64
.init_array:0000000000200DD8                 assume cs:_init_array
.init_array:0000000000200DD8                 ;org 200DD8h
.init_array:0000000000200DD8 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000200DD8                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000200DD8                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000200DD8 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000200DD8
.fini_array:0000000000200DE0 ; ELF Termination Function Table
.fini_array:0000000000200DE0 ; ===========================================================================
.fini_array:0000000000200DE0
.fini_array:0000000000200DE0 ; Segment type: Pure data
.fini_array:0000000000200DE0 ; Segment permissions: Read/Write
.fini_array:0000000000200DE0 ; Segment alignment 'qword' can not be represented in assembly
.fini_array:0000000000200DE0 _fini_array     segment para public 'DATA' use64
.fini_array:0000000000200DE0                 assume cs:_fini_array
.fini_array:0000000000200DE0                 ;org 200DE0h
.fini_array:0000000000200DE0 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000200DE0                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000200DE0 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000200DE0
.jcr:0000000000200DE8 ; ===========================================================================
.jcr:0000000000200DE8
.jcr:0000000000200DE8 ; Segment type: Pure data
.jcr:0000000000200DE8 ; Segment permissions: Read/Write
.jcr:0000000000200DE8 ; Segment alignment 'qword' can not be represented in assembly
.jcr:0000000000200DE8 _jcr            segment para public 'DATA' use64
.jcr:0000000000200DE8                 assume cs:_jcr
.jcr:0000000000200DE8                 ;org 200DE8h
.jcr:0000000000200DE8 __JCR_LIST__    db    0                 ; DATA XREF: frame_dummy↑o
.jcr:0000000000200DE9                 db    0
.jcr:0000000000200DEA                 db    0
.jcr:0000000000200DEB                 db    0
.jcr:0000000000200DEC                 db    0
.jcr:0000000000200DED                 db    0
.jcr:0000000000200DEE                 db    0
.jcr:0000000000200DEF                 db    0
.jcr:0000000000200DEF _jcr            ends
.jcr:0000000000200DEF
LOAD:0000000000200DF0 ; ELF Dynamic Information
LOAD:0000000000200DF0 ; ===========================================================================
LOAD:0000000000200DF0
LOAD:0000000000200DF0 ; Segment type: Pure data
LOAD:0000000000200DF0 ; Segment permissions: Read/Write
LOAD:0000000000200DF0 LOAD            segment byte public 'DATA' use64
LOAD:0000000000200DF0                 assume cs:LOAD
LOAD:0000000000200DF0                 ;org 200DF0h
LOAD:0000000000200DF0 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000200DF0                                         ; .got.plt:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000200DF0                                         ; DT_NEEDED libc.so.6
LOAD:0000000000200E00                 Elf64_Dyn <0Ch, 530h>   ; DT_INIT
LOAD:0000000000200E10                 Elf64_Dyn <0Dh, 744h>   ; DT_FINI
LOAD:0000000000200E20                 Elf64_Dyn <19h, 200DD8h> ; DT_INIT_ARRAY
LOAD:0000000000200E30                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000200E40                 Elf64_Dyn <1Ah, 200DE0h> ; DT_FINI_ARRAY
LOAD:0000000000200E50                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000200E60                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000200E70                 Elf64_Dyn <5, 378h>     ; DT_STRTAB
LOAD:0000000000200E80                 Elf64_Dyn <6, 2B8h>     ; DT_SYMTAB
LOAD:0000000000200E90                 Elf64_Dyn <0Ah, 96h>    ; DT_STRSZ
LOAD:0000000000200EA0                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000200EB0                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000200EC0                 Elf64_Dyn <3, 201000h>  ; DT_PLTGOT
LOAD:0000000000200ED0                 Elf64_Dyn <2, 18h>      ; DT_PLTRELSZ
LOAD:0000000000200EE0                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000200EF0                 Elf64_Dyn <17h, 518h>   ; DT_JMPREL
LOAD:0000000000200F00                 Elf64_Dyn <7, 440h>     ; DT_RELA
LOAD:0000000000200F10                 Elf64_Dyn <8, 0D8h>     ; DT_RELASZ
LOAD:0000000000200F20                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000200F30                 Elf64_Dyn <6FFFFFFBh, 8000000h> ; DT_FLAGS_1
LOAD:0000000000200F40                 Elf64_Dyn <6FFFFFFEh, 420h> ; DT_VERNEED
LOAD:0000000000200F50                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000200F60                 Elf64_Dyn <6FFFFFF0h, 40Eh> ; DT_VERSYM
LOAD:0000000000200F70                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
LOAD:0000000000200F80                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000200F90                 db    0
LOAD:0000000000200F91                 db    0
LOAD:0000000000200F92                 db    0
LOAD:0000000000200F93                 db    0
LOAD:0000000000200F94                 db    0
LOAD:0000000000200F95                 db    0
LOAD:0000000000200F96                 db    0
LOAD:0000000000200F97                 db    0
LOAD:0000000000200F98                 db    0
LOAD:0000000000200F99                 db    0
LOAD:0000000000200F9A                 db    0
LOAD:0000000000200F9B                 db    0
LOAD:0000000000200F9C                 db    0
LOAD:0000000000200F9D                 db    0
LOAD:0000000000200F9E                 db    0
LOAD:0000000000200F9F                 db    0
LOAD:0000000000200FA0                 db    0
LOAD:0000000000200FA1                 db    0
LOAD:0000000000200FA2                 db    0
LOAD:0000000000200FA3                 db    0
LOAD:0000000000200FA4                 db    0
LOAD:0000000000200FA5                 db    0
LOAD:0000000000200FA6                 db    0
LOAD:0000000000200FA7                 db    0
LOAD:0000000000200FA8                 db    0
LOAD:0000000000200FA9                 db    0
LOAD:0000000000200FAA                 db    0
LOAD:0000000000200FAB                 db    0
LOAD:0000000000200FAC                 db    0
LOAD:0000000000200FAD                 db    0
LOAD:0000000000200FAE                 db    0
LOAD:0000000000200FAF                 db    0
LOAD:0000000000200FB0                 db    0
LOAD:0000000000200FB1                 db    0
LOAD:0000000000200FB2                 db    0
LOAD:0000000000200FB3                 db    0
LOAD:0000000000200FB4                 db    0
LOAD:0000000000200FB5                 db    0
LOAD:0000000000200FB6                 db    0
LOAD:0000000000200FB7                 db    0
LOAD:0000000000200FB8                 db    0
LOAD:0000000000200FB9                 db    0
LOAD:0000000000200FBA                 db    0
LOAD:0000000000200FBB                 db    0
LOAD:0000000000200FBC                 db    0
LOAD:0000000000200FBD                 db    0
LOAD:0000000000200FBE                 db    0
LOAD:0000000000200FBF                 db    0
LOAD:0000000000200FC0                 db    0
LOAD:0000000000200FC1                 db    0
LOAD:0000000000200FC2                 db    0
LOAD:0000000000200FC3                 db    0
LOAD:0000000000200FC4                 db    0
LOAD:0000000000200FC5                 db    0
LOAD:0000000000200FC6                 db    0
LOAD:0000000000200FC7                 db    0
LOAD:0000000000200FC8                 db    0
LOAD:0000000000200FC9                 db    0
LOAD:0000000000200FCA                 db    0
LOAD:0000000000200FCB                 db    0
LOAD:0000000000200FCC                 db    0
LOAD:0000000000200FCD                 db    0
LOAD:0000000000200FCE                 db    0
LOAD:0000000000200FCF                 db    0
LOAD:0000000000200FCF LOAD            ends
LOAD:0000000000200FCF
.got:0000000000200FD0 ; ===========================================================================
.got:0000000000200FD0
.got:0000000000200FD0 ; Segment type: Pure data
.got:0000000000200FD0 ; Segment permissions: Read/Write
.got:0000000000200FD0 ; Segment alignment 'qword' can not be represented in assembly
.got:0000000000200FD0 _got            segment para public 'DATA' use64
.got:0000000000200FD0                 assume cs:_got
.got:0000000000200FD0                 ;org 200FD0h
.got:0000000000200FD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000200FD0                                         ; DATA XREF: deregister_tm_clones+1B↑r
.got:0000000000200FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000200FD8                                         ; DATA XREF: _start+24↑r
.got:0000000000200FE0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000200FE0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000200FE8 _Jv_RegisterClasses_ptr dq offset _Jv_RegisterClasses
.got:0000000000200FE8                                         ; DATA XREF: frame_dummy:loc_698↑r
.got:0000000000200FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000200FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000200FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000200FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000200FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000200FF8 _got            ends
.got:0000000000200FF8
.got.plt:0000000000201000 ; ===========================================================================
.got.plt:0000000000201000
.got.plt:0000000000201000 ; Segment type: Pure data
.got.plt:0000000000201000 ; Segment permissions: Read/Write
.got.plt:0000000000201000 ; Segment alignment 'qword' can not be represented in assembly
.got.plt:0000000000201000 _got_plt        segment para public 'DATA' use64
.got.plt:0000000000201000                 assume cs:_got_plt
.got.plt:0000000000201000                 ;org 201000h
.got.plt:0000000000201000 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got.plt:0000000000201008 qword_201008    dq 0                    ; DATA XREF: sub_550↑r
.got.plt:0000000000201010 qword_201010    dq 0                    ; DATA XREF: sub_550+6↑r
.got.plt:0000000000201018 off_201018      dq offset puts          ; DATA XREF: _puts↑r
.got.plt:0000000000201018 _got_plt        ends
.got.plt:0000000000201018
.data:0000000000201020 ; ===========================================================================
.data:0000000000201020
.data:0000000000201020 ; Segment type: Pure data
.data:0000000000201020 ; Segment permissions: Read/Write
.data:0000000000201020 ; Segment alignment 'qword' can not be represented in assembly
.data:0000000000201020 _data           segment para public 'DATA' use64
.data:0000000000201020                 assume cs:_data
.data:0000000000201020                 ;org 201020h
.data:0000000000201020                 public __data_start ; weak
.data:0000000000201020 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000201020                                         ; data_start
.data:0000000000201021                 db    0
.data:0000000000201022                 db    0
.data:0000000000201023                 db    0
.data:0000000000201024                 db    0
.data:0000000000201025                 db    0
.data:0000000000201026                 db    0
.data:0000000000201027                 db    0
.data:0000000000201028                 public __dso_handle
.data:0000000000201028 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000201028                                         ; .data:__dso_handle↓o
.data:0000000000201028 _data           ends
.data:0000000000201028
.bss:0000000000201030 ; ===========================================================================
.bss:0000000000201030
.bss:0000000000201030 ; Segment type: Uninitialized
.bss:0000000000201030 ; Segment permissions: Read/Write
.bss:0000000000201030 _bss            segment byte public 'BSS' use64
.bss:0000000000201030                 assume cs:_bss
.bss:0000000000201030                 ;org 201030h
.bss:0000000000201030                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000201030                 public __bss_start
.bss:0000000000201030 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
.bss:0000000000201030                                         ; register_tm_clones↑o ...
.bss:0000000000201030                                         ; Alternative name is '__TMC_END__'
.bss:0000000000201030                                         ; completed.6972
.bss:0000000000201030                                         ; _edata
.bss:0000000000201031                 db    ? ;
.bss:0000000000201032                 db    ? ;
.bss:0000000000201033                 db    ? ;
.bss:0000000000201034                 db    ? ;
.bss:0000000000201035                 db    ? ;
.bss:0000000000201036                 db    ? ;
.bss:0000000000201037 unk_201037      db    ? ;               ; DATA XREF: deregister_tm_clones+7↑o
.bss:0000000000201037 _bss            ends
.bss:0000000000201037
.prgend:0000000000201038 ; ===========================================================================
.prgend:0000000000201038
.prgend:0000000000201038 ; Segment type: Zero-length
.prgend:0000000000201038 _prgend         segment byte public '' use64
.prgend:0000000000201038 _end            label byte
.prgend:0000000000201038 _prgend         ends
.prgend:0000000000201038
extern:0000000000201040 ; ===========================================================================
extern:0000000000201040
extern:0000000000201040 ; Segment type: Externs
extern:0000000000201040 ; extern
extern:0000000000201040 ; int puts(const char *s)
extern:0000000000201040                 extrn puts:near         ; DATA XREF: .got.plt:off_201018↑o
extern:0000000000201048 ; int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000201048                 extrn __libc_start_main:near
extern:0000000000201048                                         ; CODE XREF: _start+24↑p
extern:0000000000201048                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000201050                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000201050                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000201058                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000201058                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000201060                 extrn __gmon_start__:near ; weak
extern:0000000000201060                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000201060                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000201068                 extrn _Jv_RegisterClasses:near ; weak
extern:0000000000201068                                         ; CODE XREF: frame_dummy+28↑p
extern:0000000000201068                                         ; DATA XREF: .got:_Jv_RegisterClasses_ptr↑o
extern:0000000000201070                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000201070                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000201070
extern:0000000000201070
extern:0000000000201070                 end _start