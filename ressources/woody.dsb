LOAD:0000000000400000 ;
LOAD:0000000000400000 ; +-------------------------------------------------------------------------+
LOAD:0000000000400000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
LOAD:0000000000400000 ; |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000400000 ; |                            Freeware version                             |
LOAD:0000000000400000 ; +-------------------------------------------------------------------------+
LOAD:0000000000400000 ;
LOAD:0000000000400000 ; Input SHA256 : B7A30C66997CD4A422F41674C9225365FF13F618C95BA9CE6F35E3FBA2D0B9AC
LOAD:0000000000400000 ; Input MD5    : 687E45D5F7E641A9ED920DBEE5FABAA8
LOAD:0000000000400000 ; Input CRC32  : 39C3B3FB
LOAD:0000000000400000
LOAD:0000000000400000 ; File Name   : /Users/heynard/Downloads/Ressources/woody
LOAD:0000000000400000 ; Format      : ELF64 for x86-64 (Executable)
LOAD:0000000000400000 ; Imagebase   : 400000
LOAD:0000000000400000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000400000 ; Needed Library 'libc.so.6'
LOAD:0000000000400000 ;
LOAD:0000000000400000 ; Source File : 'crtstuff.c'
LOAD:0000000000400000 ; Source File : 'sample.c'
LOAD:0000000000400000 ; Source File : 'crtstuff.c'
LOAD:0000000000400000
LOAD:0000000000400000                 .686p
LOAD:0000000000400000                 .mmx
LOAD:0000000000400000                 .model flat
LOAD:0000000000400000 .intel_syntax noprefix
LOAD:0000000000400000
LOAD:0000000000400000 ; ===========================================================================
LOAD:0000000000400000
LOAD:0000000000400000 ; Segment type: Pure code
LOAD:0000000000400000 ; Segment permissions: Read/Write/Execute
LOAD:0000000000400000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000400000                 assume cs:LOAD
LOAD:0000000000400000                 ;org 400000h
LOAD:0000000000400000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000400000 dword_400000    dd 464C457Fh            ; DATA XREF: LOAD:00000000004000C0↓o
LOAD:0000000000400000                                         ; File format: \x7FELF
LOAD:0000000000400004                 db 2                    ; File class: 64-bit
LOAD:0000000000400005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000400006                 db 1                    ; File version
LOAD:0000000000400007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000400008                 db 0                    ; ABI Version
LOAD:0000000000400009                 db 7 dup(0)             ; Padding
LOAD:0000000000400010                 dw 2                    ; File type: Executable
LOAD:0000000000400012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000400014                 dd 1                    ; File version
LOAD:0000000000400018                 dq offset _end          ; Entry point
LOAD:0000000000400020                 dq 40h                  ; PHT file offset
LOAD:0000000000400028                 dq 12ACh                ; SHT file offset
LOAD:0000000000400030                 dd 0                    ; Processor-specific flags
LOAD:0000000000400034                 dw 40h                  ; ELF header size
LOAD:0000000000400036                 dw 38h                  ; PHT entry size
LOAD:0000000000400038                 dw 8                    ; Number of entries in PHT
LOAD:000000000040003A                 dw 40h                  ; SHT entry size
LOAD:000000000040003C                 dw 1Fh                  ; Number of entries in SHT
LOAD:000000000040003E                 dw 1Ch                  ; SHT entry index for string table
LOAD:0000000000400040 ; ELF64 Program Header
LOAD:0000000000400040 ; PHT Entry 0
LOAD:0000000000400040 dword_400040    dd 6                    ; DATA XREF: LOAD:0000000000400050↓o
LOAD:0000000000400040                                         ; Type: PHDR
LOAD:0000000000400044                 dd 5                    ; Flags
LOAD:0000000000400048                 dq 40h                  ; File offset
LOAD:0000000000400050                 dq offset dword_400040  ; Virtual address
LOAD:0000000000400058                 dq 400040h              ; Physical address
LOAD:0000000000400060                 dq 1C0h                 ; Size in file image
LOAD:0000000000400068                 dq 1C0h                 ; Size in memory image
LOAD:0000000000400070                 dq 8                    ; Alignment
LOAD:0000000000400078 ; PHT Entry 1
LOAD:0000000000400078                 dd 3                    ; Type: INTERP
LOAD:000000000040007C                 dd 4                    ; Flags
LOAD:0000000000400080                 dq 200h                 ; File offset
LOAD:0000000000400088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000400090                 dq 400200h              ; Physical address
LOAD:0000000000400098                 dq 1Ch                  ; Size in file image
LOAD:00000000004000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000004000A8                 dq 1                    ; Alignment
LOAD:00000000004000B0 ; PHT Entry 2
LOAD:00000000004000B0                 dd 1                    ; Type: LOAD
LOAD:00000000004000B4                 dd 7                    ; Flags
LOAD:00000000004000B8                 dq 0                    ; File offset
LOAD:00000000004000C0                 dq offset dword_400000  ; Virtual address
LOAD:00000000004000C8                 dq 400000h              ; Physical address
LOAD:00000000004000D0                 dq 6E4h                 ; Size in file image
LOAD:00000000004000D8                 dq 6E4h                 ; Size in memory image
LOAD:00000000004000E0                 dq 200000h              ; Alignment
LOAD:00000000004000E8 ; PHT Entry 3
LOAD:00000000004000E8                 dd 1                    ; Type: LOAD
LOAD:00000000004000EC                 dd 7                    ; Flags
LOAD:00000000004000F0                 dq 6E8h                 ; File offset
LOAD:00000000004000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000400100                 dq 6006E8h              ; Physical address
LOAD:0000000000400108                 dq 2A9h                 ; Size in file image
LOAD:0000000000400110                 dq 2A9h                 ; Size in memory image
LOAD:0000000000400118                 dq 200000h              ; Alignment
LOAD:0000000000400120 ; PHT Entry 4
LOAD:0000000000400120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000400124                 dd 6                    ; Flags
LOAD:0000000000400128                 dq 700h                 ; File offset
LOAD:0000000000400130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000400138                 dq 600700h              ; Physical address
LOAD:0000000000400140                 dq 1D0h                 ; Size in file image
LOAD:0000000000400148                 dq 1D0h                 ; Size in memory image
LOAD:0000000000400150                 dq 8                    ; Alignment
LOAD:0000000000400158 ; PHT Entry 5
LOAD:0000000000400158                 dd 4                    ; Type: NOTE
LOAD:000000000040015C                 dd 4                    ; Flags
LOAD:0000000000400160                 dq 21Ch                 ; File offset
LOAD:0000000000400168                 dq offset dword_40021C  ; Virtual address
LOAD:0000000000400170                 dq 40021Ch              ; Physical address
LOAD:0000000000400178                 dq 20h                  ; Size in file image
LOAD:0000000000400180                 dq 20h                  ; Size in memory image
LOAD:0000000000400188                 dq 4                    ; Alignment
LOAD:0000000000400190 ; PHT Entry 6
LOAD:0000000000400190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000400194                 dd 4                    ; Flags
LOAD:0000000000400198                 dq 5A4h                 ; File offset
LOAD:00000000004001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000004001A8                 dq 4005A4h              ; Physical address
LOAD:00000000004001B0                 dq 34h                  ; Size in file image
LOAD:00000000004001B8                 dq 34h                  ; Size in memory image
LOAD:00000000004001C0                 dq 4                    ; Alignment
LOAD:00000000004001C8 ; PHT Entry 7
LOAD:00000000004001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000004001CC                 dd 6                    ; Flags
LOAD:00000000004001D0                 dq 0                    ; File offset
LOAD:00000000004001D8                 dq 0                    ; Virtual address
LOAD:00000000004001E0                 dq 0                    ; Physical address
LOAD:00000000004001E8                 dq 0                    ; Size in file image
LOAD:00000000004001F0                 dq 0                    ; Size in memory image
LOAD:00000000004001F8                 dq 10h                  ; Alignment
LOAD:0000000000400200 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000400200                                         ; DATA XREF: LOAD:0000000000400088↑o
LOAD:000000000040021C dword_40021C    dd 4                    ; DATA XREF: LOAD:0000000000400168↑o
LOAD:0000000000400220                 dq 100000010h, 554E47h, 600000002h, 20h
LOAD:0000000000400240 ; ELF Hash Table
LOAD:0000000000400240 elf_hash_nbucket dd 3
LOAD:0000000000400244 elf_hash_nchain dd 4
LOAD:0000000000400248 elf_hash_bucket dd 3, 2, 1
LOAD:0000000000400254 elf_hash_chain  dd 4 dup(0)
LOAD:0000000000400264                 align 8
LOAD:0000000000400268 ; ELF Symbol Table
LOAD:0000000000400268                 Elf64_Sym <0>
LOAD:0000000000400280                 Elf64_Sym <offset aPrintf - offset byte_4002C8, 12h, 0, 0, 0, 0> ; "printf"
LOAD:0000000000400298                 Elf64_Sym <offset aLibcStartMain - offset byte_4002C8, 12h, 0, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000400298                            0>
LOAD:00000000004002B0                 Elf64_Sym <offset aGmonStart - offset byte_4002C8, 20h, 0, 0, 0, 0> ; "__gmon_start__"
LOAD:00000000004002C8 ; ELF String Table
LOAD:00000000004002C8 byte_4002C8     db 0                    ; DATA XREF: LOAD:0000000000400280↑o
LOAD:00000000004002C8                                         ; LOAD:0000000000400298↑o ...
LOAD:00000000004002C9 aLibcSo6        db 'libc.so.6',0
LOAD:00000000004002D3 aPrintf         db 'printf',0           ; DATA XREF: LOAD:0000000000400280↑o
LOAD:00000000004002DA aLibcStartMain  db '__libc_start_main',0
LOAD:00000000004002DA                                         ; DATA XREF: LOAD:0000000000400298↑o
LOAD:00000000004002EC aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000004002B0↑o
LOAD:00000000004002FB aGlibc225       db 'GLIBC_2.2.5',0
LOAD:0000000000400307                 align 8
LOAD:0000000000400308                 dq 200020000h, 100010001h, 10h, 2000009691A75h, 33h
LOAD:0000000000400330 ; ELF RELA Relocation Table
LOAD:0000000000400330                 Elf64_Rela <6008D0h, 300000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000400348 ; ELF JMPREL Relocation Table
LOAD:0000000000400348                 Elf64_Rela <6008F0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT printf
LOAD:0000000000400360                 Elf64_Rela <6008F8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT __libc_start_main
LOAD:0000000000400360 LOAD            ends
LOAD:0000000000400360
.init:0000000000400378 ; ===========================================================================
.init:0000000000400378
.init:0000000000400378 ; Segment type: Pure code
.init:0000000000400378 ; Segment permissions: Read/Execute
.init:0000000000400378 _init           segment dword public 'CODE' use64
.init:0000000000400378                 assume cs:_init
.init:0000000000400378                 ;org 400378h
.init:0000000000400378                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000400378
.init:0000000000400378 ; =============== S U B R O U T I N E =======================================
.init:0000000000400378
.init:0000000000400378
.init:0000000000400378                 public _init_proc
.init:0000000000400378 _init_proc      proc near
.init:0000000000400378                 sub     rsp, 8          ; _init
.init:000000000040037C
.init:000000000040037C loc_40037C:                             ; CODE XREF: _end-200529↓j
.init:000000000040037C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000400383                 test    rax, rax
.init:0000000000400386                 jz      short loc_40038D
.init:0000000000400388                 call    __gmon_start__
.init:000000000040038D
.init:000000000040038D loc_40038D:                             ; CODE XREF: _init_proc+E↑j
.init:000000000040038D                 add     rsp, 8
.init:0000000000400391                 retn
.init:0000000000400391 _init_proc      endp
.init:0000000000400391
.init:0000000000400391 _init           ends
.init:0000000000400391
LOAD:0000000000400392 ; ===========================================================================
LOAD:0000000000400392
LOAD:0000000000400392 ; Segment type: Pure code
LOAD:0000000000400392 ; Segment permissions: Read/Write/Execute
LOAD:0000000000400392 LOAD            segment byte public 'CODE' use64
LOAD:0000000000400392                 assume cs:LOAD
LOAD:0000000000400392                 ;org 400392h
LOAD:0000000000400392                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000400392                 align 20h
LOAD:0000000000400392 LOAD            ends
LOAD:0000000000400392
.plt:00000000004003A0 ; ===========================================================================
.plt:00000000004003A0
.plt:00000000004003A0 ; Segment type: Pure code
.plt:00000000004003A0 ; Segment permissions: Read/Execute
.plt:00000000004003A0 _plt            segment para public 'CODE' use64
.plt:00000000004003A0                 assume cs:_plt
.plt:00000000004003A0                 ;org 4003A0h
.plt:00000000004003A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000004003A0
.plt:00000000004003A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000004003A0
.plt:00000000004003A0
.plt:00000000004003A0 sub_4003A0      proc near               ; CODE XREF: .plt:00000000004003BB↓j
.plt:00000000004003A0                                         ; .plt:00000000004003CB↓j
.plt:00000000004003A0                 push    cs:qword_6008E0
.plt:00000000004003A6                 jmp     cs:qword_6008E8
.plt:00000000004003A6 sub_4003A0      endp
.plt:00000000004003A6
.plt:00000000004003A6 ; ---------------------------------------------------------------------------
.plt:00000000004003AC                 align 10h
.plt:00000000004003B0 ; [00000006 BYTES: COLLAPSED FUNCTION _printf. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000000004003B6 ; ---------------------------------------------------------------------------
.plt:00000000004003B6                 push    0
.plt:00000000004003BB                 jmp     sub_4003A0
.plt:00000000004003C0 ; ---------------------------------------------------------------------------
.plt:00000000004003C0
.plt:00000000004003C0 ___libc_start_main:
.plt:00000000004003C0                 jmp     cs:off_6008F8
.plt:00000000004003C6 ; ---------------------------------------------------------------------------
.plt:00000000004003C6                 push    1
.plt:00000000004003CB                 jmp     sub_4003A0
.plt:00000000004003CB _plt            ends
.plt:00000000004003CB
.plt.got:00000000004003D0 ; ===========================================================================
.plt.got:00000000004003D0
.plt.got:00000000004003D0 ; Segment type: Pure code
.plt.got:00000000004003D0 ; Segment permissions: Read/Execute
.plt.got:00000000004003D0 ; Segment alignment 'qword' can not be represented in assembly
.plt.got:00000000004003D0 _plt_got        segment para public 'CODE' use64
.plt.got:00000000004003D0                 assume cs:_plt_got
.plt.got:00000000004003D0                 ;org 4003D0h
.plt.got:00000000004003D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000004003D0 ; [00000006 BYTES: COLLAPSED FUNCTION __gmon_start__. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt.got:00000000004003D6                 align 8
.plt.got:00000000004003D6 _plt_got        ends
.plt.got:00000000004003D6
LOAD:00000000004003D8 ; ===========================================================================
LOAD:00000000004003D8
LOAD:00000000004003D8 ; Segment type: Pure code
LOAD:00000000004003D8 ; Segment permissions: Read/Write/Execute
LOAD:00000000004003D8 LOAD            segment byte public 'CODE' use64
LOAD:00000000004003D8                 assume cs:LOAD
LOAD:00000000004003D8                 ;org 4003D8h
LOAD:00000000004003D8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000004003D8                 align 20h
LOAD:00000000004003D8 LOAD            ends
LOAD:00000000004003D8
.text:00000000004003E0 ; ===========================================================================
.text:00000000004003E0
.text:00000000004003E0 ; Segment type: Pure code
.text:00000000004003E0 ; Segment permissions: Read/Execute
.text:00000000004003E0 _text           segment para public 'CODE' use64
.text:00000000004003E0                 assume cs:_text
.text:00000000004003E0                 ;org 4003E0h
.text:00000000004003E0 ; START OF FUNCTION CHUNK FOR _end
.text:00000000004003E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000004003E0
.text:00000000004003E0                 public _start
.text:00000000004003E0 _start:                                 ; CODE XREF: _end+5C↓j
.text:00000000004003E0                                         ; DATA XREF: seg022:off_600981↓o
.text:00000000004003E0                 jnp     short loc_400445
.text:00000000004003E2                 insd
.text:00000000004003E3                 mov     word ptr [rcx], ds
.text:00000000004003E5                 adc     ch, [rax-58395750h]
.text:00000000004003EB                 loope   loc_400425
.text:00000000004003ED                 sbb     al, 0B4h
.text:00000000004003EF                 jo      short near ptr loc_40037C+2
.text:00000000004003F1                 movsb
.text:00000000004003F3                 add     [rax-740157B4h], cl
.text:00000000004003F9                 sahf
.text:00000000004003FA                 and     [rbp-38h], eax
.text:00000000004003FD                 add     al, 27h
.text:00000000004003FD ; END OF FUNCTION CHUNK FOR _end
.text:00000000004003FD ; ---------------------------------------------------------------------------
.text:00000000004003FF                 db 0FEh
.text:0000000000400400                 dq 0C61FFB2005648AAAh, 39E008D70A427AB5h
.text:0000000000400410
.text:0000000000400410 ; =============== S U B R O U T I N E =======================================
.text:0000000000400410
.text:0000000000400410
.text:0000000000400410 deregister_tm_clones proc near
.text:0000000000400410                 repne cdq
.text:0000000000400412                 sub     eax, 0A819C865h
.text:0000000000400417                 adc     al, 5Ah
.text:0000000000400419                 xchg    eax, [rbp+rax-80h]
.text:000000000040041D                 iret
.text:000000000040041D deregister_tm_clones endp
.text:000000000040041D
.text:000000000040041D ; ---------------------------------------------------------------------------
.text:000000000040041E                 dw 3718h
.text:0000000000400420                 db 2, 7, 0C1h, 73h, 0D3h
.text:0000000000400425 ; ---------------------------------------------------------------------------
.text:0000000000400425 ; START OF FUNCTION CHUNK FOR _end
.text:0000000000400425
.text:0000000000400425 loc_400425:                             ; CODE XREF: _end-20052D↑j
.text:0000000000400425                 hlt
.text:0000000000400425 ; END OF FUNCTION CHUNK FOR _end
.text:0000000000400425 ; ---------------------------------------------------------------------------
.text:0000000000400426                 dw 39E0h
.text:0000000000400428                 dq 64F13808806C8E4Ah, 5F00B3C8652D9EF5h, 39E04CC805A09145h
.text:0000000000400440                 db 17h, 4Dh, 2Bh, 1Ah, 88h
.text:0000000000400445 ; ---------------------------------------------------------------------------
.text:0000000000400445 ; START OF FUNCTION CHUNK FOR _end
.text:0000000000400445
.text:0000000000400445 loc_400445:                             ; CODE XREF: _end:_start↑j
.text:0000000000400445                 xchg    r10b, [rdi]
.text:0000000000400448                 xchg    eax, r9d
.text:0000000000400448 ; END OF FUNCTION CHUNK FOR _end
.text:0000000000400448 ; ---------------------------------------------------------------------------
.text:000000000040044A                 dw 5A0h, 4CC8h, 39E0h
.text:0000000000400450
.text:0000000000400450 ; =============== S U B R O U T I N E =======================================
.text:0000000000400450
.text:0000000000400450 ; Attributes: noreturn
.text:0000000000400450
.text:0000000000400450 register_tm_clones proc near
.text:0000000000400450                 hlt
.text:0000000000400450 register_tm_clones endp
.text:0000000000400450
.text:0000000000400450 ; ---------------------------------------------------------------------------
.text:0000000000400451                 db 9Eh, 2Dh, 65h, 0C8h, 19h, 0A8h, 0B8h
.text:0000000000400458                 dq 0C72104C8652D9EA4h, 7110C580E0ADC649h, 0E8A88AC94D1B668Bh
.text:0000000000400458                 dq 39E04CC8BD31FAB4h, 295F11C371E40B02h, 39FF4328FA24EE43h
.text:0000000000400458                 dq 39E008D70A424D17h
.text:0000000000400490
.text:0000000000400490 ; =============== S U B R O U T I N E =======================================
.text:0000000000400490
.text:0000000000400490
.text:0000000000400490 __do_global_dtors_aux proc far          ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000400490                 retf    5DB3h
.text:0000000000400490 __do_global_dtors_aux endp
.text:0000000000400490
.text:0000000000400490 ; ---------------------------------------------------------------------------
.text:0000000000400493                 db 1, 0E8h, 4Ch, 0E0h, 4Ch
.text:0000000000400498                 dq 0C68EA42D8C6CDB5Bh, 19E42ACDC37971B5h, 39A053C7C6D78F4Ah
.text:00000000004004B0 ; ---------------------------------------------------------------------------
.text:00000000004004B0
.text:00000000004004B0 frame_dummy:                            ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000004004B0                 cmc
.text:00000000004004B1                 jbe     short loc_4004D5
.text:00000000004004B3                 db      65h
.text:00000000004004B3                 enter   6304h, 6
.text:00000000004004B8                 sti
.text:00000000004004BA                 and     esi, ebp
.text:00000000004004BC                 pop     rbx
.text:00000000004004BC ; ---------------------------------------------------------------------------
.text:00000000004004BD                 db 43h, 0FFh, 39h
.text:00000000004004C0                 dq 0F96504C805248EF2h, 0E91FA9414D717F3Eh
.text:00000000004004D0                 db 17h, 67h, 5Eh, 0FAh, 37h
.text:00000000004004D5 ; ---------------------------------------------------------------------------
.text:00000000004004D5
.text:00000000004004D5 loc_4004D5:                             ; CODE XREF: .text:00000000004004B1↑j
.text:00000000004004D5                 mov     bl, 86h
.text:00000000004004D5 ; ---------------------------------------------------------------------------
.text:00000000004004D7                 db 17h
.text:00000000004004D8                 dq 39E04CC805A09145h
.text:00000000004004E0                 public main
.text:00000000004004E0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000004004E0 main            dq 290CCF80E0ADC61Fh, 39E04C8800B03102h, 39E04C3440E38E4Ah
.text:00000000004004E0                 dq 0C61FB278ED243E4Ah, 7128C53040AD477Bh, 39FF430B58344AC9h
.text:0000000000400510 ; ---------------------------------------------------------------------------
.text:0000000000400510
.text:0000000000400510                 public __libc_csu_init
.text:0000000000400510 __libc_csu_init:
.text:0000000000400510                 or      ebx, ecx
.text:0000000000400512                 db      65h
.text:0000000000400512                 push    rbx
.text:0000000000400514                 mov     ebp, eax
.text:0000000000400514 ; ---------------------------------------------------------------------------
.text:0000000000400516                 dw 781Fh
.text:0000000000400518                 dq 382669454970CF1Fh, 382661454D718E6Ah, 0B0A9BA414C778E6Ah
.text:0000000000400518                 dq 0BAA8A9E149FFBF9Fh, 0C084F35C46C86A6h, 2794A14D4DDB71B4h
.text:0000000000400518                 dq 39E04CC805A09145h, 0B0A4BA4149CE0706h, 0FA63041411DBCFB5h
.text:0000000000400518                 dq 0BAA8A6BDEE1DC64Bh, 64A11089587F868Eh, 1786DC0B5A65D00Bh
.text:0000000000400518                 dq 39E04CC805A09145h
.text:0000000000400580                 public __libc_csu_fini
.text:0000000000400580 __libc_csu_fini db 0B9h, 4Dh
.text:0000000000400580 _text           ends
.text:0000000000400580
LOAD:0000000000400582 ; ===========================================================================
LOAD:0000000000400582
LOAD:0000000000400582 ; Segment type: Pure code
LOAD:0000000000400582 ; Segment permissions: Read/Write/Execute
LOAD:0000000000400582 LOAD            segment byte public 'CODE' use64
LOAD:0000000000400582                 assume cs:LOAD
LOAD:0000000000400582                 ;org 400582h
LOAD:0000000000400582                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000400582                 align 4
LOAD:0000000000400582 LOAD            ends
LOAD:0000000000400582
.fini:0000000000400584 ; ===========================================================================
.fini:0000000000400584
.fini:0000000000400584 ; Segment type: Pure code
.fini:0000000000400584 ; Segment permissions: Read/Execute
.fini:0000000000400584 _fini           segment dword public 'CODE' use64
.fini:0000000000400584                 assume cs:_fini
.fini:0000000000400584                 ;org 400584h
.fini:0000000000400584                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000400584
.fini:0000000000400584 ; =============== S U B R O U T I N E =======================================
.fini:0000000000400584
.fini:0000000000400584
.fini:0000000000400584                 public _term_proc
.fini:0000000000400584 _term_proc      proc near
.fini:0000000000400584                 sub     rsp, 8          ; _fini
.fini:0000000000400588                 add     rsp, 8
.fini:000000000040058C                 retn
.fini:000000000040058C _term_proc      endp
.fini:000000000040058C
.fini:000000000040058C _fini           ends
.fini:000000000040058C
LOAD:000000000040058D ; ===========================================================================
LOAD:000000000040058D
LOAD:000000000040058D ; Segment type: Pure code
LOAD:000000000040058D ; Segment permissions: Read/Write/Execute
LOAD:000000000040058D LOAD            segment byte public 'CODE' use64
LOAD:000000000040058D                 assume cs:LOAD
LOAD:000000000040058D                 ;org 40058Dh
LOAD:000000000040058D                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000040058D                 align 10h
LOAD:000000000040058D LOAD            ends
LOAD:000000000040058D
.rodata:0000000000400590 ; ===========================================================================
.rodata:0000000000400590
.rodata:0000000000400590 ; Segment type: Pure data
.rodata:0000000000400590 ; Segment permissions: Read
.rodata:0000000000400590 _rodata         segment dword public 'CONST' use64
.rodata:0000000000400590                 assume cs:_rodata
.rodata:0000000000400590                 ;org 400590h
.rodata:0000000000400590                 public _IO_stdin_used
.rodata:0000000000400590 _IO_stdin_used  db    1
.rodata:0000000000400591                 db    0
.rodata:0000000000400592                 db    2
.rodata:0000000000400593                 db    0
.rodata:0000000000400594                 db  48h ; H
.rodata:0000000000400595                 db  65h ; e
.rodata:0000000000400596                 db  6Ch ; l
.rodata:0000000000400597                 db  6Ch ; l
.rodata:0000000000400598                 db  6Fh ; o
.rodata:0000000000400599                 db  2Ch ; ,
.rodata:000000000040059A                 db  20h
.rodata:000000000040059B                 db  57h ; W
.rodata:000000000040059C                 db  6Fh ; o
.rodata:000000000040059D                 db  72h ; r
.rodata:000000000040059E                 db  6Ch ; l
.rodata:000000000040059F                 db  64h ; d
.rodata:00000000004005A0                 db  21h ; !
.rodata:00000000004005A1                 db  0Ah
.rodata:00000000004005A2                 db    0
.rodata:00000000004005A2 _rodata         ends
.rodata:00000000004005A2
LOAD:00000000004005A3 ; ===========================================================================
LOAD:00000000004005A3
LOAD:00000000004005A3 ; Segment type: Pure code
LOAD:00000000004005A3 ; Segment permissions: Read/Write/Execute
LOAD:00000000004005A3 LOAD            segment byte public 'CODE' use64
LOAD:00000000004005A3                 assume cs:LOAD
LOAD:00000000004005A3                 ;org 4005A3h
LOAD:00000000004005A3                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000004005A3                 align 4
LOAD:00000000004005A3 LOAD            ends
LOAD:00000000004005A3
.eh_frame_hdr:00000000004005A4 ; ===========================================================================
.eh_frame_hdr:00000000004005A4
.eh_frame_hdr:00000000004005A4 ; Segment type: Pure data
.eh_frame_hdr:00000000004005A4 ; Segment permissions: Read
.eh_frame_hdr:00000000004005A4 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000004005A4                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000004005A4                 ;org 4005A4h
.eh_frame_hdr:00000000004005A4 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000004001A0↑o
.eh_frame_hdr:00000000004005A5                 db  1Bh
.eh_frame_hdr:00000000004005A6                 db    3
.eh_frame_hdr:00000000004005A7                 db  3Bh ; ;
.eh_frame_hdr:00000000004005A8                 db  30h ; 0
.eh_frame_hdr:00000000004005A9                 db    0
.eh_frame_hdr:00000000004005AA                 db    0
.eh_frame_hdr:00000000004005AB                 db    0
.eh_frame_hdr:00000000004005AC                 db    5
.eh_frame_hdr:00000000004005AD                 db    0
.eh_frame_hdr:00000000004005AE                 db    0
.eh_frame_hdr:00000000004005AF                 db    0
.eh_frame_hdr:00000000004005B0                 db 0FCh
.eh_frame_hdr:00000000004005B1                 db 0FDh
.eh_frame_hdr:00000000004005B2                 db 0FFh
.eh_frame_hdr:00000000004005B3                 db 0FFh
.eh_frame_hdr:00000000004005B4                 db  7Ch ; |
.eh_frame_hdr:00000000004005B5                 db    0
.eh_frame_hdr:00000000004005B6                 db    0
.eh_frame_hdr:00000000004005B7                 db    0
.eh_frame_hdr:00000000004005B8                 db  3Ch ; <
.eh_frame_hdr:00000000004005B9                 db 0FEh
.eh_frame_hdr:00000000004005BA                 db 0FFh
.eh_frame_hdr:00000000004005BB                 db 0FFh
.eh_frame_hdr:00000000004005BC                 db  4Ch ; L
.eh_frame_hdr:00000000004005BD                 db    0
.eh_frame_hdr:00000000004005BE                 db    0
.eh_frame_hdr:00000000004005BF                 db    0
.eh_frame_hdr:00000000004005C0                 db  3Ch ; <
.eh_frame_hdr:00000000004005C1                 db 0FFh
.eh_frame_hdr:00000000004005C2                 db 0FFh
.eh_frame_hdr:00000000004005C3                 db 0FFh
.eh_frame_hdr:00000000004005C4                 db 0BCh
.eh_frame_hdr:00000000004005C5                 db    0
.eh_frame_hdr:00000000004005C6                 db    0
.eh_frame_hdr:00000000004005C7                 db    0
.eh_frame_hdr:00000000004005C8                 db  6Ch ; l
.eh_frame_hdr:00000000004005C9                 db 0FFh
.eh_frame_hdr:00000000004005CA                 db 0FFh
.eh_frame_hdr:00000000004005CB                 db 0FFh
.eh_frame_hdr:00000000004005CC                 db 0DCh
.eh_frame_hdr:00000000004005CD                 db    0
.eh_frame_hdr:00000000004005CE                 db    0
.eh_frame_hdr:00000000004005CF                 db    0
.eh_frame_hdr:00000000004005D0                 db 0DCh
.eh_frame_hdr:00000000004005D1                 db 0FFh
.eh_frame_hdr:00000000004005D2                 db 0FFh
.eh_frame_hdr:00000000004005D3                 db 0FFh
.eh_frame_hdr:00000000004005D4                 db  24h ; $
.eh_frame_hdr:00000000004005D5                 db    1
.eh_frame_hdr:00000000004005D6                 db    0
.eh_frame_hdr:00000000004005D7                 db    0
.eh_frame_hdr:00000000004005D7 _eh_frame_hdr   ends
.eh_frame_hdr:00000000004005D7
.eh_frame:00000000004005D8 ; ===========================================================================
.eh_frame:00000000004005D8
.eh_frame:00000000004005D8 ; Segment type: Pure data
.eh_frame:00000000004005D8 ; Segment permissions: Read
.eh_frame:00000000004005D8 ; Segment alignment 'qword' can not be represented in assembly
.eh_frame:00000000004005D8 _eh_frame       segment para public 'CONST' use64
.eh_frame:00000000004005D8                 assume cs:_eh_frame
.eh_frame:00000000004005D8                 ;org 4005D8h
.eh_frame:00000000004005D8                 db  14h
.eh_frame:00000000004005D9                 db    0
.eh_frame:00000000004005DA                 db    0
.eh_frame:00000000004005DB                 db    0
.eh_frame:00000000004005DC                 db    0
.eh_frame:00000000004005DD                 db    0
.eh_frame:00000000004005DE                 db    0
.eh_frame:00000000004005DF                 db    0
.eh_frame:00000000004005E0                 db    1
.eh_frame:00000000004005E1                 db  7Ah ; z
.eh_frame:00000000004005E2                 db  52h ; R
.eh_frame:00000000004005E3                 db    0
.eh_frame:00000000004005E4                 db    1
.eh_frame:00000000004005E5                 db  78h ; x
.eh_frame:00000000004005E6                 db  10h
.eh_frame:00000000004005E7                 db    1
.eh_frame:00000000004005E8                 db  1Bh
.eh_frame:00000000004005E9                 db  0Ch
.eh_frame:00000000004005EA                 db    7
.eh_frame:00000000004005EB                 db    8
.eh_frame:00000000004005EC                 db  90h
.eh_frame:00000000004005ED                 db    1
.eh_frame:00000000004005EE                 db    7
.eh_frame:00000000004005EF                 db  10h
.eh_frame:00000000004005F0                 db  14h
.eh_frame:00000000004005F1                 db    0
.eh_frame:00000000004005F2                 db    0
.eh_frame:00000000004005F3                 db    0
.eh_frame:00000000004005F4                 db  1Ch
.eh_frame:00000000004005F5                 db    0
.eh_frame:00000000004005F6                 db    0
.eh_frame:00000000004005F7                 db    0
.eh_frame:00000000004005F8                 db 0E8h
.eh_frame:00000000004005F9                 db 0FDh
.eh_frame:00000000004005FA                 db 0FFh
.eh_frame:00000000004005FB                 db 0FFh
.eh_frame:00000000004005FC                 db  2Ah ; *
.eh_frame:00000000004005FD                 db    0
.eh_frame:00000000004005FE                 db    0
.eh_frame:00000000004005FF                 db    0
.eh_frame:0000000000400600                 db    0
.eh_frame:0000000000400601                 db    0
.eh_frame:0000000000400602                 db    0
.eh_frame:0000000000400603                 db    0
.eh_frame:0000000000400604                 db    0
.eh_frame:0000000000400605                 db    0
.eh_frame:0000000000400606                 db    0
.eh_frame:0000000000400607                 db    0
.eh_frame:0000000000400608                 db  14h
.eh_frame:0000000000400609                 db    0
.eh_frame:000000000040060A                 db    0
.eh_frame:000000000040060B                 db    0
.eh_frame:000000000040060C                 db    0
.eh_frame:000000000040060D                 db    0
.eh_frame:000000000040060E                 db    0
.eh_frame:000000000040060F                 db    0
.eh_frame:0000000000400610                 db    1
.eh_frame:0000000000400611                 db  7Ah ; z
.eh_frame:0000000000400612                 db  52h ; R
.eh_frame:0000000000400613                 db    0
.eh_frame:0000000000400614                 db    1
.eh_frame:0000000000400615                 db  78h ; x
.eh_frame:0000000000400616                 db  10h
.eh_frame:0000000000400617                 db    1
.eh_frame:0000000000400618                 db  1Bh
.eh_frame:0000000000400619                 db  0Ch
.eh_frame:000000000040061A                 db    7
.eh_frame:000000000040061B                 db    8
.eh_frame:000000000040061C                 db  90h
.eh_frame:000000000040061D                 db    1
.eh_frame:000000000040061E                 db    0
.eh_frame:000000000040061F                 db    0
.eh_frame:0000000000400620                 db  24h ; $
.eh_frame:0000000000400621                 db    0
.eh_frame:0000000000400622                 db    0
.eh_frame:0000000000400623                 db    0
.eh_frame:0000000000400624                 db  1Ch
.eh_frame:0000000000400625                 db    0
.eh_frame:0000000000400626                 db    0
.eh_frame:0000000000400627                 db    0
.eh_frame:0000000000400628                 db  78h ; x
.eh_frame:0000000000400629                 db 0FDh
.eh_frame:000000000040062A                 db 0FFh
.eh_frame:000000000040062B                 db 0FFh
.eh_frame:000000000040062C                 db  30h ; 0
.eh_frame:000000000040062D                 db    0
.eh_frame:000000000040062E                 db    0
.eh_frame:000000000040062F                 db    0
.eh_frame:0000000000400630                 db    0
.eh_frame:0000000000400631                 db  0Eh
.eh_frame:0000000000400632                 db  10h
.eh_frame:0000000000400633                 db  46h ; F
.eh_frame:0000000000400634                 db  0Eh
.eh_frame:0000000000400635                 db  18h
.eh_frame:0000000000400636                 db  4Ah ; J
.eh_frame:0000000000400637                 db  0Fh
.eh_frame:0000000000400638                 db  0Bh
.eh_frame:0000000000400639                 db  77h ; w
.eh_frame:000000000040063A                 db    8
.eh_frame:000000000040063B                 db  80h
.eh_frame:000000000040063C                 db    0
.eh_frame:000000000040063D                 db  3Fh ; ?
.eh_frame:000000000040063E                 db  1Ah
.eh_frame:000000000040063F                 db  3Bh ; ;
.eh_frame:0000000000400640                 db  2Ah ; *
.eh_frame:0000000000400641                 db  33h ; 3
.eh_frame:0000000000400642                 db  24h ; $
.eh_frame:0000000000400643                 db  22h ; "
.eh_frame:0000000000400644                 db    0
.eh_frame:0000000000400645                 db    0
.eh_frame:0000000000400646                 db    0
.eh_frame:0000000000400647                 db    0
.eh_frame:0000000000400648                 db  14h
.eh_frame:0000000000400649                 db    0
.eh_frame:000000000040064A                 db    0
.eh_frame:000000000040064B                 db    0
.eh_frame:000000000040064C                 db    0
.eh_frame:000000000040064D                 db    0
.eh_frame:000000000040064E                 db    0
.eh_frame:000000000040064F                 db    0
.eh_frame:0000000000400650                 db    3
.eh_frame:0000000000400651                 db  7Ah ; z
.eh_frame:0000000000400652                 db  52h ; R
.eh_frame:0000000000400653                 db    0
.eh_frame:0000000000400654                 db    1
.eh_frame:0000000000400655                 db  78h ; x
.eh_frame:0000000000400656                 db  10h
.eh_frame:0000000000400657                 db    1
.eh_frame:0000000000400658                 db  1Bh
.eh_frame:0000000000400659                 db  0Ch
.eh_frame:000000000040065A                 db    7
.eh_frame:000000000040065B                 db    8
.eh_frame:000000000040065C                 db  90h
.eh_frame:000000000040065D                 db    1
.eh_frame:000000000040065E                 db    0
.eh_frame:000000000040065F                 db    0
.eh_frame:0000000000400660                 db  1Ch
.eh_frame:0000000000400661                 db    0
.eh_frame:0000000000400662                 db    0
.eh_frame:0000000000400663                 db    0
.eh_frame:0000000000400664                 db  1Ch
.eh_frame:0000000000400665                 db    0
.eh_frame:0000000000400666                 db    0
.eh_frame:0000000000400667                 db    0
.eh_frame:0000000000400668                 db  78h ; x
.eh_frame:0000000000400669                 db 0FEh
.eh_frame:000000000040066A                 db 0FFh
.eh_frame:000000000040066B                 db 0FFh
.eh_frame:000000000040066C                 db  2Dh ; -
.eh_frame:000000000040066D                 db    0
.eh_frame:000000000040066E                 db    0
.eh_frame:000000000040066F                 db    0
.eh_frame:0000000000400670                 db    0
.eh_frame:0000000000400671                 db  41h ; A
.eh_frame:0000000000400672                 db  0Eh
.eh_frame:0000000000400673                 db  10h
.eh_frame:0000000000400674                 db  86h
.eh_frame:0000000000400675                 db    2
.eh_frame:0000000000400676                 db  43h ; C
.eh_frame:0000000000400677                 db  0Dh
.eh_frame:0000000000400678                 db    6
.eh_frame:0000000000400679                 db    0
.eh_frame:000000000040067A                 db    0
.eh_frame:000000000040067B                 db    0
.eh_frame:000000000040067C                 db    0
.eh_frame:000000000040067D                 db    0
.eh_frame:000000000040067E                 db    0
.eh_frame:000000000040067F                 db    0
.eh_frame:0000000000400680                 db  44h ; D
.eh_frame:0000000000400681                 db    0
.eh_frame:0000000000400682                 db    0
.eh_frame:0000000000400683                 db    0
.eh_frame:0000000000400684                 db  7Ch ; |
.eh_frame:0000000000400685                 db    0
.eh_frame:0000000000400686                 db    0
.eh_frame:0000000000400687                 db    0
.eh_frame:0000000000400688                 db  88h
.eh_frame:0000000000400689                 db 0FEh
.eh_frame:000000000040068A                 db 0FFh
.eh_frame:000000000040068B                 db 0FFh
.eh_frame:000000000040068C                 db  65h ; e
.eh_frame:000000000040068D                 db    0
.eh_frame:000000000040068E                 db    0
.eh_frame:000000000040068F                 db    0
.eh_frame:0000000000400690                 db    0
.eh_frame:0000000000400691                 db  42h ; B
.eh_frame:0000000000400692                 db  0Eh
.eh_frame:0000000000400693                 db  10h
.eh_frame:0000000000400694                 db  8Fh
.eh_frame:0000000000400695                 db    2
.eh_frame:0000000000400696                 db  42h ; B
.eh_frame:0000000000400697                 db  0Eh
.eh_frame:0000000000400698                 db  18h
.eh_frame:0000000000400699                 db  8Eh
.eh_frame:000000000040069A                 db    3
.eh_frame:000000000040069B                 db  45h ; E
.eh_frame:000000000040069C                 db  0Eh
.eh_frame:000000000040069D                 db  20h
.eh_frame:000000000040069E                 db  8Dh
.eh_frame:000000000040069F                 db    4
.eh_frame:00000000004006A0                 db  42h ; B
.eh_frame:00000000004006A1                 db  0Eh
.eh_frame:00000000004006A2                 db  28h ; (
.eh_frame:00000000004006A3                 db  8Ch
.eh_frame:00000000004006A4                 db    5
.eh_frame:00000000004006A5                 db  48h ; H
.eh_frame:00000000004006A6                 db  0Eh
.eh_frame:00000000004006A7                 db  30h ; 0
.eh_frame:00000000004006A8                 db  86h
.eh_frame:00000000004006A9                 db    6
.eh_frame:00000000004006AA                 db  48h ; H
.eh_frame:00000000004006AB                 db  0Eh
.eh_frame:00000000004006AC                 db  38h ; 8
.eh_frame:00000000004006AD                 db  83h
.eh_frame:00000000004006AE                 db    7
.eh_frame:00000000004006AF                 db  4Fh ; O
.eh_frame:00000000004006B0                 db  0Eh
.eh_frame:00000000004006B1                 db  40h ; @
.eh_frame:00000000004006B2                 db  70h ; p
.eh_frame:00000000004006B3                 db  0Eh
.eh_frame:00000000004006B4                 db  38h ; 8
.eh_frame:00000000004006B5                 db  41h ; A
.eh_frame:00000000004006B6                 db  0Eh
.eh_frame:00000000004006B7                 db  30h ; 0
.eh_frame:00000000004006B8                 db  41h ; A
.eh_frame:00000000004006B9                 db  0Eh
.eh_frame:00000000004006BA                 db  28h ; (
.eh_frame:00000000004006BB                 db  42h ; B
.eh_frame:00000000004006BC                 db  0Eh
.eh_frame:00000000004006BD                 db  20h
.eh_frame:00000000004006BE                 db  42h ; B
.eh_frame:00000000004006BF                 db  0Eh
.eh_frame:00000000004006C0                 db  18h
.eh_frame:00000000004006C1                 db  42h ; B
.eh_frame:00000000004006C2                 db  0Eh
.eh_frame:00000000004006C3                 db  10h
.eh_frame:00000000004006C4                 db  42h ; B
.eh_frame:00000000004006C5                 db  0Eh
.eh_frame:00000000004006C6                 db    8
.eh_frame:00000000004006C7                 db    0
.eh_frame:00000000004006C8                 db  14h
.eh_frame:00000000004006C9                 db    0
.eh_frame:00000000004006CA                 db    0
.eh_frame:00000000004006CB                 db    0
.eh_frame:00000000004006CC                 db 0C4h
.eh_frame:00000000004006CD                 db    0
.eh_frame:00000000004006CE                 db    0
.eh_frame:00000000004006CF                 db    0
.eh_frame:00000000004006D0                 db 0B0h
.eh_frame:00000000004006D1                 db 0FEh
.eh_frame:00000000004006D2                 db 0FFh
.eh_frame:00000000004006D3                 db 0FFh
.eh_frame:00000000004006D4                 db    2
.eh_frame:00000000004006D5                 db    0
.eh_frame:00000000004006D6                 db    0
.eh_frame:00000000004006D7                 db    0
.eh_frame:00000000004006D8                 db    0
.eh_frame:00000000004006D9                 db    0
.eh_frame:00000000004006DA                 db    0
.eh_frame:00000000004006DB                 db    0
.eh_frame:00000000004006DC                 db    0
.eh_frame:00000000004006DD                 db    0
.eh_frame:00000000004006DE                 db    0
.eh_frame:00000000004006DF                 db    0
.eh_frame:00000000004006E0 __FRAME_END__   db    0
.eh_frame:00000000004006E1                 db    0
.eh_frame:00000000004006E2                 db    0
.eh_frame:00000000004006E3                 db    0
.eh_frame:00000000004006E3 _eh_frame       ends
.eh_frame:00000000004006E3
.init_array:00000000006006E8 ; ELF Initialization Function Table
.init_array:00000000006006E8 ; ===========================================================================
.init_array:00000000006006E8
.init_array:00000000006006E8 ; Segment type: Pure data
.init_array:00000000006006E8 ; Segment permissions: Read/Write
.init_array:00000000006006E8 ; Segment alignment 'qword' can not be represented in assembly
.init_array:00000000006006E8 _init_array     segment para public 'DATA' use64
.init_array:00000000006006E8                 assume cs:_init_array
.init_array:00000000006006E8                 ;org 6006E8h
.init_array:00000000006006E8 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:00000000006006E8                                         ; DATA XREF: LOAD:00000000004000F8↑o
.init_array:00000000006006E8 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:00000000006006E8
.fini_array:00000000006006F0 ; ELF Termination Function Table
.fini_array:00000000006006F0 ; ===========================================================================
.fini_array:00000000006006F0
.fini_array:00000000006006F0 ; Segment type: Pure data
.fini_array:00000000006006F0 ; Segment permissions: Read/Write
.fini_array:00000000006006F0 ; Segment alignment 'qword' can not be represented in assembly
.fini_array:00000000006006F0 _fini_array     segment para public 'DATA' use64
.fini_array:00000000006006F0                 assume cs:_fini_array
.fini_array:00000000006006F0                 ;org 6006F0h
.fini_array:00000000006006F0 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux ; Alternative name is '__init_array_end'
.fini_array:00000000006006F0 _fini_array     ends
.fini_array:00000000006006F0
.jcr:00000000006006F8 ; ===========================================================================
.jcr:00000000006006F8
.jcr:00000000006006F8 ; Segment type: Pure data
.jcr:00000000006006F8 ; Segment permissions: Read/Write
.jcr:00000000006006F8 ; Segment alignment 'qword' can not be represented in assembly
.jcr:00000000006006F8 _jcr            segment para public 'DATA' use64
.jcr:00000000006006F8                 assume cs:_jcr
.jcr:00000000006006F8                 ;org 6006F8h
.jcr:00000000006006F8 __JCR_LIST__    db    0
.jcr:00000000006006F9                 db    0
.jcr:00000000006006FA                 db    0
.jcr:00000000006006FB                 db    0
.jcr:00000000006006FC                 db    0
.jcr:00000000006006FD                 db    0
.jcr:00000000006006FE                 db    0
.jcr:00000000006006FF                 db    0
.jcr:00000000006006FF _jcr            ends
.jcr:00000000006006FF
LOAD:0000000000600700 ; ELF Dynamic Information
LOAD:0000000000600700 ; ===========================================================================
LOAD:0000000000600700
LOAD:0000000000600700 ; Segment type: Pure code
LOAD:0000000000600700 ; Segment permissions: Read/Write/Execute
LOAD:0000000000600700 LOAD            segment byte public 'CODE' use64
LOAD:0000000000600700                 assume cs:LOAD
LOAD:0000000000600700                 ;org 600700h
LOAD:0000000000600700                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000600700 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000400130↑o
LOAD:0000000000600700                                         ; .got.plt:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000600700                                         ; DT_NEEDED libc.so.6
LOAD:0000000000600710                 Elf64_Dyn <0Ch, 400378h> ; DT_INIT
LOAD:0000000000600720                 Elf64_Dyn <0Dh, 400584h> ; DT_FINI
LOAD:0000000000600730                 Elf64_Dyn <19h, 6006E8h> ; DT_INIT_ARRAY
LOAD:0000000000600740                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000600750                 Elf64_Dyn <1Ah, 6006F0h> ; DT_FINI_ARRAY
LOAD:0000000000600760                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000600770                 Elf64_Dyn <4, 400240h>  ; DT_HASH
LOAD:0000000000600780                 Elf64_Dyn <5, 4002C8h>  ; DT_STRTAB
LOAD:0000000000600790                 Elf64_Dyn <6, 400268h>  ; DT_SYMTAB
LOAD:00000000006007A0                 Elf64_Dyn <0Ah, 3Fh>    ; DT_STRSZ
LOAD:00000000006007B0                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:00000000006007C0                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:00000000006007D0                 Elf64_Dyn <3, 6008D8h>  ; DT_PLTGOT
LOAD:00000000006007E0                 Elf64_Dyn <2, 30h>      ; DT_PLTRELSZ
LOAD:00000000006007F0                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000600800                 Elf64_Dyn <17h, 400348h> ; DT_JMPREL
LOAD:0000000000600810                 Elf64_Dyn <7, 400330h>  ; DT_RELA
LOAD:0000000000600820                 Elf64_Dyn <8, 18h>      ; DT_RELASZ
LOAD:0000000000600830                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000600840                 Elf64_Dyn <6FFFFFFEh, 400310h> ; DT_VERNEED
LOAD:0000000000600850                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000600860                 Elf64_Dyn <6FFFFFF0h, 400308h> ; DT_VERSYM
LOAD:0000000000600870                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000600880                 dq 0Ah dup(0)
LOAD:0000000000600880 LOAD            ends
LOAD:0000000000600880
.got:00000000006008D0 ; ===========================================================================
.got:00000000006008D0
.got:00000000006008D0 ; Segment type: Pure data
.got:00000000006008D0 ; Segment permissions: Read/Write
.got:00000000006008D0 ; Segment alignment 'qword' can not be represented in assembly
.got:00000000006008D0 _got            segment para public 'DATA' use64
.got:00000000006008D0                 assume cs:_got
.got:00000000006008D0                 ;org 6008D0h
.got:00000000006008D0 __gmon_start___ptr dq offset __imp___gmon_start__
.got:00000000006008D0                                         ; DATA XREF: _init_proc:loc_40037C↑r
.got:00000000006008D0                                         ; __gmon_start__↑r
.got:00000000006008D0 _got            ends
.got:00000000006008D0
.got.plt:00000000006008D8 ; ===========================================================================
.got.plt:00000000006008D8
.got.plt:00000000006008D8 ; Segment type: Pure data
.got.plt:00000000006008D8 ; Segment permissions: Read/Write
.got.plt:00000000006008D8 ; Segment alignment 'qword' can not be represented in assembly
.got.plt:00000000006008D8 _got_plt        segment para public 'DATA' use64
.got.plt:00000000006008D8                 assume cs:_got_plt
.got.plt:00000000006008D8                 ;org 6008D8h
.got.plt:00000000006008D8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got.plt:00000000006008E0 qword_6008E0    dq 0                    ; DATA XREF: sub_4003A0↑r
.got.plt:00000000006008E8 qword_6008E8    dq 0                    ; DATA XREF: sub_4003A0+6↑r
.got.plt:00000000006008F0 off_6008F0      dq offset printf        ; DATA XREF: _printf↑r
.got.plt:00000000006008F8 off_6008F8      dq offset __libc_start_main
.got.plt:00000000006008F8                                         ; DATA XREF: .plt:___libc_start_main↑r
.got.plt:00000000006008F8 _got_plt        ends
.got.plt:00000000006008F8
.data:0000000000600900 ; ===========================================================================
.data:0000000000600900
.data:0000000000600900 ; Segment type: Pure data
.data:0000000000600900 ; Segment permissions: Read/Write
.data:0000000000600900 ; Segment alignment 'qword' can not be represented in assembly
.data:0000000000600900 _data           segment para public 'DATA' use64
.data:0000000000600900                 assume cs:_data
.data:0000000000600900                 ;org 600900h
.data:0000000000600900                 public __data_start ; weak
.data:0000000000600900 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000600900                                         ; data_start
.data:0000000000600901                 db    0
.data:0000000000600902                 db    0
.data:0000000000600903                 db    0
.data:0000000000600904                 db    0
.data:0000000000600905                 db    0
.data:0000000000600906                 db    0
.data:0000000000600907                 db    0
.data:0000000000600908                 public __dso_handle
.data:0000000000600908 __dso_handle    db    0
.data:0000000000600909                 db    0
.data:000000000060090A                 db    0
.data:000000000060090B                 db    0
.data:000000000060090C                 db    0
.data:000000000060090D                 db    0
.data:000000000060090E                 db    0
.data:000000000060090F                 db    0
.data:000000000060090F _data           ends
.data:000000000060090F
.bss:0000000000600910 ; ===========================================================================
.bss:0000000000600910
.bss:0000000000600910 ; Segment type: Uninitialized
.bss:0000000000600910 ; Segment permissions: Read/Write
.bss:0000000000600910 _bss            segment dword public 'BSS' use64
.bss:0000000000600910                 assume cs:_bss
.bss:0000000000600910                 ;org 600910h
.bss:0000000000600910                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000600910                 public __bss_start
.bss:0000000000600910 __bss_start     db    0                 ; Alternative name is '__TMC_END__'
.bss:0000000000600910                                         ; completed.6971
.bss:0000000000600910                                         ; _edata
.bss:0000000000600911                 db    0
.bss:0000000000600912                 db    0
.bss:0000000000600913                 db    0
.bss:0000000000600914                 db    0
.bss:0000000000600915                 db    0
.bss:0000000000600916                 db    0
.bss:0000000000600917                 db    0
.bss:0000000000600917 _bss            ends
.bss:0000000000600917
seg022:0000000000600918 ; ===========================================================================
seg022:0000000000600918
seg022:0000000000600918 ; Segment type: Pure code
seg022:0000000000600918 ; Segment permissions: Read/Execute
seg022:0000000000600918 seg022          segment para public 'CODE' use64
seg022:0000000000600918                 assume cs:seg022
seg022:0000000000600918                 ;org 600918h
seg022:0000000000600918                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
seg022:0000000000600918
seg022:0000000000600918 ; =============== S U B R O U T I N E =======================================
seg022:0000000000600918
seg022:0000000000600918
seg022:0000000000600918                 public _end
seg022:0000000000600918 _end            proc near               ; DATA XREF: LOAD:0000000000400018↑o
seg022:0000000000600918
seg022:0000000000600918 ; FUNCTION CHUNK AT .text:00000000004003E0 SIZE 0000001F BYTES
seg022:0000000000600918 ; FUNCTION CHUNK AT .text:0000000000400425 SIZE 00000001 BYTES
seg022:0000000000600918 ; FUNCTION CHUNK AT .text:0000000000400445 SIZE 00000005 BYTES
seg022:0000000000600918
seg022:0000000000600918                 pushfq
seg022:0000000000600919                 push    rax
seg022:000000000060091A                 push    rdi
seg022:000000000060091B                 push    rsi
seg022:000000000060091C                 push    rsp
seg022:000000000060091D                 push    rdx
seg022:000000000060091E                 push    rcx
seg022:000000000060091F                 mov     edi, 1          ; fd
seg022:0000000000600924                 lea     rsi, buf        ; "....WOODY.....\n"
seg022:000000000060092B                 mov     edx, 10h        ; count
seg022:0000000000600930                 mov     rax, rdi
seg022:0000000000600933                 syscall                 ; LINUX - sys_write
seg022:0000000000600935                 jmp     short loc_600947
seg022:0000000000600935 ; ---------------------------------------------------------------------------
seg022:0000000000600937 ; char buf[]
seg022:0000000000600937 buf             db '....WOODY.....',0Ah,0
seg022:0000000000600937                                         ; DATA XREF: _end+C↑o
seg022:0000000000600947 ; ---------------------------------------------------------------------------
seg022:0000000000600947
seg022:0000000000600947 loc_600947:                             ; CODE XREF: _end+1D↑j
seg022:0000000000600947                 mov     rax, cs:off_600981
seg022:000000000060094E                 mov     rcx, cs:qword_600989
seg022:0000000000600955                 mov     rdx, cs:qword_600979
seg022:000000000060095C                 add     rcx, rax
seg022:000000000060095F
seg022:000000000060095F loc_60095F:                             ; CODE XREF: _end+53↓j
seg022:000000000060095F                 xor     [rax], dl
seg022:0000000000600961                 ror     rdx, 8
seg022:0000000000600965                 inc     rax
seg022:0000000000600968                 cmp     rax, rcx
seg022:000000000060096B                 jnz     short loc_60095F
seg022:000000000060096D                 pop     rcx
seg022:000000000060096E                 pop     rdx
seg022:000000000060096F                 pop     rsp
seg022:0000000000600970                 pop     rsi
seg022:0000000000600971                 pop     rdi
seg022:0000000000600972                 pop     rax
seg022:0000000000600973                 popfq
seg022:0000000000600974                 jmp     _start
seg022:0000000000600974 _end            endp
seg022:0000000000600974
seg022:0000000000600974 ; ---------------------------------------------------------------------------
seg022:0000000000600979 qword_600979    dq 39E04CC805248E4Ah    ; DATA XREF: _end+3D↑r
seg022:0000000000600981 off_600981      dq offset _start        ; DATA XREF: _end:loc_600947↑r
seg022:0000000000600989 qword_600989    dq 1A2h                 ; DATA XREF: _end+36↑r
seg022:0000000000600989 seg022          ends
seg022:0000000000600989
extern:0000000000600998 ; ===========================================================================
extern:0000000000600998
extern:0000000000600998 ; Segment type: Externs
extern:0000000000600998 ; extern
extern:0000000000600998 ; int printf(const char *format, ...)
extern:0000000000600998                 extrn printf:near       ; DATA XREF: .got.plt:off_6008F0↑o
extern:00000000006009A0 ; int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000006009A0                 extrn __libc_start_main:near
extern:00000000006009A0                                         ; DATA XREF: .got.plt:off_6008F8↑o
extern:00000000006009A8                 extrn __imp___gmon_start__ ; weak
extern:00000000006009A8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000006009A8
extern:00000000006009A8
extern:00000000006009A8                 end _end